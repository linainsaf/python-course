{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to The Data Science Class","text":""},{"location":"#introduction","title":"Introduction","text":"<p>In this class, we will explore the fundamental concepts and techniques used in the field of data science, including statistical analysis, machine learning, data visualization, and more. You will learn how to extract insights and make predictions from large and complex datasets using a variety of tools and techniques. Whether you are new to the field or have some experience, this class will provide you with the skills and knowledge you need to succeed as a data scientist. </p>"},{"location":"#what-is-data-science","title":"What is Data Science","text":"<p>Data science is an interdisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from structured and unstructured data. It involves the use of various techniques and tools such as machine learning, statistical analysis, and visualization to extract useful information and insights from data. This information can then be used to make decisions, predictions, or to inform research.</p> <p></p> <p>Data science is used in a wide range of fields such as finance, healthcare, retail, marketing, transportation, and many more. It has become increasingly important as the amount of data generated by modern technology continues to grow.</p> <p></p> <p></p>"},{"location":"#planning-of-the-course","title":"Planning of the course","text":"<ul> <li> <p>Python Programming : Python's simplicity, readability, and the availability of powerful libraries and modules make it a great choice for data science tasks, from data manipulation and analysis to building and deploying machine learning models.</p> </li> <li> <p>Data Base Management System : In data science, it is often necessary to work with large amounts of data that are stored in databases. Database management systems (DBMS) provide a way to organize, store, and retrieve data in an efficient and organized way.</p> </li> <li> <p>R Programming : R is particularly useful for data analysis in fields such as genomics, finance, and social sciences.</p> </li> <li> <p>Exploratory Data Analysis : Is an essential step in the data science process. It is the process of analyzing and summarizing the main characteristics of a data set, and is used to uncover patterns, trends, and relationships within the data. EDA helps data scientists to understand the data they are working with, identify any potential issues or biases, and select the appropriate statistical techniques to use for further analysis. It also helps to create a solid foundation for building models and making predictions. </p> </li> <li> <p>Machine Learning :  It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention. Machine learning focuses on the development of algorithms and statistical models that enable computers to learn from and make predictions or decisions without being explicitly programmed to perform the task</p> </li> <li> <p>Deep Learning : Deep learning is a subfield of machine learning that is inspired by the structure and function of the brain, specifically the neural networks. It involves training large artificial neural networks to perform tasks such as image and speech recognition, natural language processing, and decision making. These neural networks are trained using large amounts of data and are able to learn and improve over time. Deep learning has achieved state-of-the-art results in many areas and has revolutionized the field of artificial intelligence. It is widely used in applications such as computer vision, natural language processing, and self-driving cars.</p> </li> <li> <p>AI models Deployement : AI models deployments refer to the process of taking a trained AI model and making it available for use in a production environment. This can include things like scaling the model to handle large amounts of data, integrating the model with other systems and software, and monitoring the performance of the model in a live setting.</p> </li> <li> <p>Data Visualization using Tableau/Power Bi : Data visualization is the process of creating graphical representations of data in order to effectively communicate insights and findings. Tableau and Power BI are both popular tools used for data visualization. They offer a wide range of interactive visualizations, including maps, charts, and dashboards</p> </li> <li> <p>Capstone Project : The project is designed to apply the knowledge and skills that students have learned throughout the program. It is typically a hands-on, real-world project that requires students to use data science techniques and tools to solve a problem or answer a research question. The project can be based on any topic that is relevant to data science and can include tasks such as data collection, cleaning, exploration, analysis, modeling, and visualization.</p> </li> </ul> <p></p> <p>Let's get started!</p>"},{"location":"basic/","title":"Basic Python Concepts","text":""},{"location":"basic/#basic-python-concepts","title":"Basic Python Concepts","text":""},{"location":"basic/#variables","title":"Variables","text":"<p>Variables are used to store values in Python. They are like containers that hold data, and you can use them to perform operations on that data. Variables are declared using the assignment operator (=) and can be of different types, such as integers, floating-point numbers, strings, and more.</p> <pre><code># Example of variable assignment\nx = 5\ny = \"Hello World\"\nz = [1, 2, 3]\n</code></pre>"},{"location":"basic/#data-types-and-structures","title":"Data types and structures","text":"<p>Python supports several built-in data types, such as integers, floating-point numbers, strings, lists, tuples, and dictionaries. Each data type has its own set of characteristics and methods.</p> <pre><code># Example of different data types\nx = 5 # integer\ny = 3.14 # floating-point number\nz = \"Hello World\" # string\na = [1, 2, 3] # list\nb = (4, 5, 6) # tuple\nc = {\"name\": \"John\", \"age\": 30} # dictionary\n</code></pre>"},{"location":"basic/#operators","title":"Operators","text":"<p>Python supports various types of operators, such as arithmetic operators (+, -, x , /, %), comparison operators (&gt;, &lt;, &gt;=, &lt;=, ==, !=), and logical operators (and, or, not). These operators are used to perform different types of operations on variables and data.</p> <pre><code># Example of operators\nx = 5\ny = 2\n# arithmetic operators\nprint(x + y) # 7\nprint(x - y) # 3\nprint(x * y) # 10\nprint(x / y) # 2.5\nprint(x % y) # 1\n# comparison operators\nprint(x == y) # False\nprint(x &gt; 2) # True\n# logical operators \nprint(x == y and x &gt; 2) # False\nprint(x == y or x &gt; 2) # True\n</code></pre>"},{"location":"basic/#control-flow","title":"Control flow","text":"<p>Control flow or Conditional Statements allows us to control the flow of execution of our program based on certain conditions. For example : </p> <ul> <li>if-elif-else statements </li> </ul> <pre><code>x = 5\nif x &gt; 0:\nprint(\"x is positive\")\nelif x &lt; 0:\nprint(\"x is negative\")\nelse:\nprint(\"x is zero\")\n</code></pre> <ul> <li>for loop</li> </ul> <pre><code>for i in range(5):\nprint(i)\n</code></pre> <ul> <li>while loop  </li> </ul> <pre><code>x = 5\nwhile x &gt; 0:\nprint(x)\nx -= 1\n</code></pre>"},{"location":"basic/#functions","title":"Functions","text":"<p>Functions are a way to group together a set of instructions to perform a specific task. Functions are defined using the def keyword and can take input arguments and return output values.</p> <pre><code>def add(x, y):\nreturn x + y\nresult = add(5, 2)\nprint(result) # 7\n</code></pre>"},{"location":"basic/#modules-and-libraries","title":"Modules and Libraries","text":"<p>Python has a large number of built-in modules and libraries that provide a wide range of functionality. You can use these modules to perform various tasks, such as working with the file system, performing mathematical calculations, and more.</p> <pre><code># Example of importing a module\nimport math\nresult = math.sqrt(16)\nprint(result) # 4.0\n# Example of importing a specific function from a module\nfrom math import sqrt\nresult = sqrt(16)\nprint(result) # 4.0\n</code></pre>"},{"location":"basic/#exception-handling","title":"Exception Handling","text":"<p>Python supports exception handling, which allows you to handle errors and exceptions that may occur while running your program. This helps you to write robust code that can handle unexpected situations</p> <pre><code>while True:\ntry:\nx = int(input(\"Please enter a number: \"))\ny = int(input(\"Please enter another number: \"))\nprint(\"The result of x/y is:\", x/y)\nbreak\nexcept ValueError:\nprint(\"Oops! One of the inputs was not a valid number. Try again...\")\nexcept ZeroDivisionError:\nprint(\"Oops! You cannot divide by zero. Try again...\")\n</code></pre> <p>In this example, program will handle two types of exception: ValueError and ZeroDivisionError, as the user input may not be valid number and also user may try to divide by zero.</p> <p></p> <p>Now, let's code ! </p>"},{"location":"basic/#things-to-remember","title":"Things to Remember","text":"<ul> <li> <p>Case Sensitivity: Python is a case-sensitive language, so be mindful of the case when naming variables, functions, and classes. This means, Variable and variable are not the same.</p> </li> <li> <p>Each variable, function and class should have a unique name within your code</p> </li> <li> <p>The only variables you need to consider inside your function are the arguments of that function</p> </li> <li> <p>Always give the identifiers a name that makes sense. While c = 10 is a valid name, writing count = 10 would make more sense, and it would be easier to figure out what it represents when you look at your code after a long gap.</p> </li> <li> <p>Multiple words can be separated using an underscore, like this_is_a_long_variable.</p> </li> <li> <p>Comments: Use the pound symbol (#) to denote comments in your code, which will be ignored by the interpreter. In computer programming, comments are hints that we use to make our code more understandable. </p> </li> <li> <p>Quotation Marks: In Python, you can use either single quotes or double quotes to denote strings, but be consistent within your code.</p> </li> <li> <p>Colon (:): Colons are used to denote the start of a new block of code, such as in a for loop, if statement, or function definition.</p> </li> <li> <p>White Space: Be mindful of white space, as it can affect the way your code is interpreted. For example, leading white space is used to denote blocks of code.</p> </li> <li> <p>Parentheses: Parentheses are used to group expressions, to call functions, and to define tuples.</p> </li> <li> <p>Import Statement: Use the import statement to import libraries and modules into your code.</p> </li> <li> <p>print() function: Use the print() function to output text to the console.</p> </li> </ul>"},{"location":"env/","title":"Setting up a Development Environment","text":""},{"location":"env/#setting-up-a-development-environment","title":"Setting up a Development Environment","text":""},{"location":"env/#introduction","title":"Introduction","text":"<p>In this chapter, you will learn how to set up a Python development environment on your computer. A development environment is a software application that provides the necessary tools and resources for writing, testing, and debugging code. By the end of this chapter, you will have a working Python environment that you can use to start writing your own programs.</p>"},{"location":"env/#installing-python","title":"Installing Python","text":"<p>There are several ways to install Python 3, here are some of the most common methods:</p>"},{"location":"env/#using-anaconda","title":"Using Anaconda","text":"<p>Anaconda is a popular distribution of Python and R for data science and machine learning. It comes with a lot of packages and libraries pre-installed, and it also includes the conda package manager, which makes it easy to install additional packages and manage environments. To install Python using Anaconda, you can follow these steps:</p> <ul> <li>Go to the Anaconda Website and download the latest version of Anaconda for your operating system.</li> <li>Once the download is complete, run the installer and follow the prompts to install Anaconda.</li> <li>Once installation is complete, open Anaconda Navigator, which is a graphical user interface that allows you to manage your environments and packages.</li> <li>Create a new environment with Python 3 by clicking the \"Create\" button and selecting \"Python 3\" as the version.</li> </ul>"},{"location":"env/#using-pip","title":"Using pip","text":"<p>pip is the package installer for Python. It allows you to install and manage packages for your Python installation. To install Python 3 and Jupyter Notebook using pip, you can follow these two steps:</p> <ul> <li> <p>Make sure that Python 3 is installed on your system by running the command <code>python3 --version</code> in a terminal or command prompt.</p> </li> <li> <p>If Python 3 is not installed, download the latest version from The Official Python Website.</p> </li> </ul>"},{"location":"env/#using-homebrew-macos-and-linux","title":"Using Homebrew (macOS and Linux)","text":"<p>Homebrew is a package manager for macOS and Linux. It allows you to install and manage packages for your operating system. To install Python 3 using Homebrew, you can follow these steps:</p> <ul> <li>Make sure that Homebrew is installed on your system by running the command <code>brew --version</code> in a terminal.</li> <li>If Homebrew is not installed, you can install it by following the instructions on The Homebrew Website.</li> <li>Once you have Homebrew installed, you can use it to install Python 3 by running the command <code>brew install python3</code> in a terminal.</li> </ul>"},{"location":"env/#using-chocolatey-windows","title":"Using Chocolatey (Windows)","text":"<p>Chocolatey is a package manager for Windows. It allows you to install and manage packages for your operating system. To install Python 3 using Chocolatey, you can follow these steps:</p> <ul> <li>Make sure that Chocolatey is installed on your system by running the command <code>choco --version</code> in a command prompt.</li> <li> <p>If Chocolatey is not installed, you can install it by following the instructions on The Chocolatey Website.</p> </li> <li> <p>Once you have Chocolatey installed, you can use it to install Python 3 by running the command <code>choco install python</code> in a command prompt.</p> </li> </ul> <p>PS : It's also worth noting that many operating systems and Linux distributions come with Python 2 pre-installed, and you may want to install Python 3 alongside it without replacing the pre-installed Python 2. In this case, you should be careful when running pip and python commands, since you may need to use pip3 and python3, respectively, to ensure that you're using the correct version of the software.</p>"},{"location":"env/#choosing-an-ide-or-text-editor","title":"Choosing an IDE or Text Editor","text":"<p>Once you have Python installed, the next step is to choose a text editor or integrated development environment (IDE) to write your code in. An IDE is a software application that provides a comprehensive environment for coding, including features such as syntax highlighting, code completion, and debugging tools. In this class we're using Jupyter. Jupyter is an open-source web-based IDE that allows users to create and share documents that contain live code, equations, visualizations, and narrative text. It is particularly well-suited for data science because it:</p> <ul> <li> <p>Provides an easy way to interact with data: Jupyter allows you to load, visualize, and manipulate data in a variety of formats, such as CSV, JSON, and SQL. This makes it a great tool for data exploration and analysis.</p> </li> <li> <p>Supports multiple programming languages: Jupyter supports many programming languages, including Python, R, and Julia, which makes it easy to use the language that is best suited for your project.</p> </li> <li> <p>Enables reproducible research: Jupyter allows you to organize your code, data, and visualizations in a single document, which makes it easy to reproduce your results and share your work with others.</p> </li> <li> <p>Provides a collaborative environment: Jupyter allows multiple users to work on the same notebook at the same time, which makes it a great tool for collaborative data science projects.</p> </li> <li> <p>Has a large and active community: Jupyter has a large and active community of developers, users, and contributors who provide support, resources, and add-ons that extend its functionality.</p> </li> </ul> <p>To install Jupyter:</p> <ul> <li> <p>Using Anaconda: In your conda enviroment you can install Jupyter Notebook by running the command <code>conda install jupyter</code>. </p> </li> <li> <p>Using pip3: You can install Jupyter using the pip package manager by running the command <code>pip3 install jupyter</code> in your command line. This method requires that you have Python3 and pip3 already installed on your system.</p> </li> </ul> <p>You can then launch Jupyter Notebook by running the command jupyter notebook in a terminal or command prompt.</p> <p></p> <p></p> <p></p> <p>Some popular IDEs for Python include PyCharm, Spyder, and IDLE. Text editors, such as Sublime Text, Atom, or Notepad++, are also popular among Python developers and are preferred by some. I suggest you Install Sublime Text as a second IDE.</p>"},{"location":"env/#installing-additional-libraries-and-packages","title":"Installing Additional Libraries and Packages","text":"<p>Python has a vast collection of libraries and packages that can be used to perform a wide range of tasks. Some popular packages include NumPy and Pandas for data manipulation, Matplotlib and Seaborn for data visualization, and scikit-learn for machine learning. You can install these packages using the pip package manager, which is included with Python.</p> <p></p> <p>Examples : </p> <ul> <li><code>pip3 install numpy</code></li> <li><code>pip3 install pandas</code></li> </ul>"},{"location":"env/#conclusion","title":"Conclusion","text":"<p>By the end of this chapter, you should have a working Python development environment that you can use to start writing your own programs. You will have a Python interpreter, a text editor or IDE, and any additional libraries and packages that you need. In the next chapter, you will learn the basics of Python programming, including data types, variables, and operators.</p>"},{"location":"intro/","title":"Introduction to Python Programming","text":""},{"location":"intro/#introduction-to-python-programming","title":"Introduction to Python Programming","text":"<p>Python is a powerful, high-level programming language that is widely used for web development, data analysis, machine learning, and scientific computing. Its simple, easy-to-read syntax and versatile libraries make it a popular choice for beginners and experienced programmers alike. </p> <p></p> <p>In this course, you will learn the basics of Python programming, including data types, variables, operators, control flow, and functions. You will also explore advanced topics such as data structures, working with data, data visualization, and machine learning. Along the way, you will gain hands-on experience through a variety of exercises and a final project.</p> <p></p> <p>By the end of this course, you will have a solid foundation in Python programming, and the skills to apply it to a wide range of data science and other applications.</p>"},{"location":"intro/#various-recources-for-you-to-practice","title":"Various Recources for you to practice","text":"<ul> <li> <p>Codecademy's Learn Python Track: This interactive course covers all the basics of Python and includes exercises to practice what you've learned.</p> </li> <li> <p>HackerRank's Python Domain: This website offers a wide range of Python coding challenges, from beginners to advanced levels.</p> </li> <li> <p>Python.org's Beginner's Guide: This guide provides a gentle introduction to Python, including tutorials and exercises for beginners.</p> </li> <li> <p>Google's Python Class: This free class, taught by Google engineer Nick Parlante, includes video lectures, slides, and exercises.</p> </li> <li> <p>Full Stack Python : Is a website that provides resources and tutorials on various aspects of the Python programming language, with a focus on web development and data science. Additionally, the website provides a curated list of resources for further learning and a podcast discussing all things Python.</p> </li> <li> <p>Code Signal : Is a website and platform that provides a variety of tools and resources for developers, including a code editor, a test runner, and a code execution environment. It also provides a variety of challenges and assessments to help developers improve their coding skills. </p> </li> </ul>"},{"location":"io/","title":"File Input/Output (I/O) Operations","text":""},{"location":"io/#introduction","title":"Introduction","text":"<p>File Input/Output (I/O) operations in Python allow you to read from and write to files on your local file system. The open function is the main function used for working with files in Python, and it returns a file object that can be used to perform various operations on the file.</p>"},{"location":"io/#opening-a-file","title":"Opening a File","text":"<p>The basic syntax for opening a file in Python is as follows:</p> <pre><code>file = open(\"filename.extension\", \"mode\")\n</code></pre> <p>The first argument is the name of the file, and the second argument is the mode in which you want to open the file. The most common modes are \"r\" for reading, \"w\" for writing, and \"a\" for appending.</p> <p></p> <p>For example, to open a text file called example.txt in read mode, you would write the following code:</p> <pre><code>file = open(\"example.txt\", \"r\")\n</code></pre>"},{"location":"io/#reading-from-a-file","title":"Reading from a File","text":"<p>Once you have opened a file, you can read from it using various methods, such as read, readline, and readlines.</p> <p></p> <p>The read method reads the entire contents of a file as a single string. For example:</p> <pre><code>file = open(\"example.txt\", \"r\")\ncontents = file.read()\nprint(contents)\nfile.close()\n</code></pre> <p>The readline method reads a single line of a file. For example:</p> <pre><code>file = open(\"example.txt\", \"r\")\nfirst_line = file.readline()\nprint(first_line)\nfile.close()\n</code></pre> <p>The readlines method reads all lines of a file as a list of strings, where each string is a single line. For example:</p> <pre><code>file = open(\"example.txt\", \"r\")\nlines = file.readlines()\nprint(lines)\nfile.close()\n</code></pre>"},{"location":"io/#writing-to-a-file","title":"Writing to a File","text":"<p>To write to a file, you can use the write method. The basic syntax for writing to a file is as follows:</p> <pre><code>file = open(\"filename.extension\", \"mode\")\nfile.write(\"data to be written\")\nfile.close()\n</code></pre> <p>For example, to write the string \"Hello, World!\" to a file called example.txt, you would write the following code:</p> <pre><code>file = open(\"example.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()\n</code></pre> <p>If the file specified in the open function does not exist, it will be created. If the file does exist, its contents will be overwritten by the new data.</p>"},{"location":"io/#appending-to-a-file","title":"Appending to a File","text":"<p>To append data to an existing file, you can open the file in append mode (\"a\") instead of write mode (\"w\"). The basic syntax for appending to a file is as follows:</p> <pre><code>file = open(\"filename.extension\", \"mode\")\nfile.write(\"data to be written\")\nfile.close()\n</code></pre> <p>For example, to append the string \"Hello, World!\" to a file called example.txt, you would write the following code:</p> <pre><code>file = open(\"example.txt\", \"a\")\nfile.write(\"Hello, World!\")\nfile.close()\n</code></pre>"},{"location":"io/#context-manager","title":"Context Manager","text":"<p>One important thing to note when working with files in Python is that you should always close the file when you are done with it. This can be done using the close method, as demonstrated in the previous examples. However, there is a better way to ensure that the file is always closed, even if an error occurs, and that is by using a context manager.</p> <p></p> <p>A context manager is an object that provides a convenient way to manage resources, such as files, that need to be cleaned up after they are used. In Python, the with statement is used to create a context manager. The basic syntax for using a context manager to open a file is as follows:</p> <pre><code>with open(\"filename.extension\", \"mode\") as file:\n# Perform file I/O operations\n</code></pre> <p>For example, to read the contents of a file called example.txt using a context manager, you would write the following code:</p> <pre><code>with open(\"example.txt\", \"r\") as file:\ncontents = file.read()\nprint(contents)\n</code></pre> <p>With this approach, the file is automatically closed when the with block is exited, even if an error occurs.</p>"},{"location":"io/#csv-library","title":"CSV Library","text":""},{"location":"io/#reading-data-from-a-csv-file","title":"Reading data from a CSV file","text":"<p>To read data from a CSV file, you can use the csv.reader function. This function returns an iterator that you can loop over to access the rows of the CSV file. Here is an example:</p> <pre><code>import csv\nwith open('my_file.csv', 'r') as csv_file:\ncsv_reader = csv.reader(csv_file)\n# Loop over each row in the CSV file\nfor row in csv_reader:\n# Access the values of each row\nprint(row)\n</code></pre> <p>This code opens the my_file.csv file in read mode and creates a csv.reader object using the csv.reader function. Then, it loops over each row in the CSV file and prints out the values of each row.</p>"},{"location":"io/#writing-data-to-a-csv-file","title":"Writing data to a CSV file","text":"<p>To write data to a CSV file, you can use the csv.writer function. This function takes a file object and returns a writer object that you can use to write rows to the CSV file. Here is an example:</p> <pre><code>import csv\nwith open('my_file.csv', 'w', newline='') as csv_file:\ncsv_writer = csv.writer(csv_file)\n# Write rows to the CSV file\ncsv_writer.writerow(['Title', 'Author', 'Publisher'])\ncsv_writer.writerow(['To Kill a Mockingbird', 'Harper Lee', 'Grand Central Publishing'])\n</code></pre> <p>This code opens the my_file.csv file in write mode and creates a csv.writer object using the csv.writer function. Then, it writes two rows to the CSV file.</p>"},{"location":"io/#appending-data-to-a-csv-file","title":"Appending data to a CSV file","text":"<p>To append data to a CSV file, you can use the csv.writer function with the a mode. This mode will open the file in append mode, which allows you to add new rows to the end of the file. Here is an example:</p> <pre><code>import csv\nwith open('my_file.csv', 'a', newline='') as csv_file:\ncsv_writer = csv.writer(csv_file)\n# Append rows to the CSV file\ncsv_writer.writerow(['1984', 'George Orwell', 'Signet Classic'])\n</code></pre> <p>This code opens the my_file.csv file in append mode and creates a csv.writer object using the csv.writer function. Then, it appends a new row to the end of the CSV file.</p>"},{"location":"io/#removing-data-from-a-csv-file","title":"Removing data from a CSV file","text":"<p>To remove data from a CSV file, you will need to read in the entire file, filter out the rows that you don't want, and then write the filtered rows back to the CSV file. Here is an example:</p> <p><pre><code>import csv\n# Read in the CSV file and filter out the rows that match a specific criteria\nwith open('my_file.csv', 'r') as csv_file:\ncsv_reader = csv.reader(csv_file)\nfiltered_rows = []\nfor row in csv_reader:\nif row[1] != 'Harper Lee':\nfiltered_rows.append(row)\n# Write the filtered rows back to the CSV file\nwith open('my_file.csv', 'w', newline='') as csv_file:\ncsv_writer = csv.writer(csv_file)\nfor row in filtered_rows:\ncsv_writer.writerow(row)\n</code></pre> This code reads in the my_file.csv file and filters out the rows where the author is \"Harper Lee\". Then, it opens the same file in write mode and writes the filtered rows back to the CSV file.</p>"},{"location":"numpy/","title":"NumPy","text":"<p>NumPy is short for Numerical Python. It is a Python library/package used for working with arrays which contains classes, functions, variables , a large library of mathematical functions etc for working with scientific calculation. It can be used to create an \u201cn\u201d dimensional array where \u201cn\u201d is any integer.              </p>"},{"location":"numpy/#why-numpy","title":"Why NumPy","text":"<p>In Python we have lists that serve the purpose of arrays, but they are slow. NumPy aims to provide an array object that is up to 50x faster than a traditional Python list.</p> <p></p> <p>The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy. Arrays are very frequently used in data science, where speed and resources are very important.     </p> <p></p> <p>What makes NumPy arrays faster than lists: NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. This behavior is called locality of reference. This is the main reason why NumPy is faster than lists. It is also optimized to work with the latest CPU architectures.</p>"},{"location":"numpy/#installing-numpy","title":"Installing NumPy","text":"<p>To install NumPy, you can use pip, the Python package installer. Open your terminal or command prompt and enter the following command:</p> <pre><code>pip3 install numpy\n</code></pre>"},{"location":"numpy/#importing-numpy","title":"Importing NumPy","text":"<p>There are two ways to import NumPy. Code Example : </p> <p><pre><code># this will import the entire NumPy module.\nimport numpy as np\n# this will import all class, objects, variables etc from the NumPy package   \nfrom numpy import*  \n</code></pre> NumPy is usually imported under the np alias. </p> <p></p> <p>alias: In Python aliases are an alternate name for referring to the same thing. </p> <p></p>"},{"location":"numpy/#creating-numpy-arrays","title":"Creating NumPy Arrays","text":"<p>The array object in NumPy is called ndarray. We can create a NumPy ndarray object by using the array() function. NumPy arrays can be created in a number of ways. Here are some of the most common methods:</p> <ul> <li>Using the numpy.array() function to create an array from a list/tuple:</li> </ul> <p><pre><code>a = np.array([1, 2, 3])\n</code></pre> - Using the numpy.zeros() function to create an array filled with zeros:</p> <p><pre><code>b = np.zeros((2, 3))\n</code></pre> - Using the numpy.ones() function to create an array filled with ones:</p> <pre><code>c = np.ones((2, 3))\n</code></pre> <ul> <li>Using the numpy.random.randint(): Returns an array of random integers between the two given numbers</li> </ul> <p><pre><code>d = np.random.randint(0, 10)\n</code></pre> - Using the numpy.random.rand() function to create an array of random values:</p> <pre><code>e = np.random.rand(2, 3)\n</code></pre>"},{"location":"numpy/#numpy-array-dimensions","title":"NumPy Array Dimensions","text":"<p>A dimension in arrays is one level of array depth (nested arrays). nested array: are arrays that have arrays as their elements. 0-D Arrays 1-D Arrays 2-D Arrays 3-D Arrays.</p> <p></p> <p>0-D arrays, or Scalars, are the elements in an array. Each value in an array is a 0-D array. </p> <p></p> <p>Code Example:</p> <pre><code>arr=np.array(30) \nprint (arr)\n</code></pre> <p>An array that has 0-D arrays as its elements is called a uni-dimensional or 1-D array. These are the most common types of arrays. </p> <p></p> <p>Code Example :</p> <pre><code> arr=np.array([30,35,38,40,46,52])\nprint (arr)\n</code></pre> <p>An array that has 1-D arrays as its elements is called a 2-D array. These are often used to represent matrix or 2nd order tensors. </p> <p></p> <p>Code Example :</p> <pre><code>arr=np.array([[30,35,38,40,46,52],[22,28,39,42,49,52]])\nprint (arr)\n</code></pre> <p>An array that has 2-D arrays (matrices) as its elements is called 3-D array. These are often used to represent a 3rd order tensor. </p> <p></p> <p>Code Example : </p> <pre><code>arr=np.array([[[30,35,38,40,46,52],[22,28,39,42,49,52], [71,24,88,64,31,94]]])\nprint (arr)\n</code></pre> <p>NumPy Arrays provides the ndim attribute that returns an integer that tells us how many dimensions the array has. </p> <p></p> <p>Code Example :</p> <p><pre><code>arr=np.array([[[30,35,38,40,46,52],[22,28,39,42,49,52], [71,24,88,64,31,94]]])\nprint (arr.ndim)\n</code></pre> An array can have any number of dimensions. When the array is created, you can define the number of dimensions by using the ndim argument. </p> <p></p> <p>Code Example : </p> <pre><code>arr=np.array([1,2,3,4],ndmin=6)\nprint (arr.ndim)\nprint (\u201cNumber of dimensions:\u201d, arr.ndim)\n</code></pre>"},{"location":"numpy/#arrays-type-and-shape","title":"Arrays type and shape","text":"<p>NumPy Array Data Type :The NumPy array object has a property called dtype that returns the data type of the array.</p> <p></p> <p>Code Example :</p> <p><pre><code>arr=np.array([1,2,3,4,5]) \nprint (arr.dtype)\n</code></pre> NumPy Array Shape : The shape of an array is the number of elements in each dimension. NumPy arrays have an attribute called shape that returns a tuple with each index having the number of corresponding elements</p> <p></p> <p>Code example :</p> <pre><code>arr=np.array([1,2,3,4,5,6])\nprint (arr.shape)\n</code></pre>"},{"location":"numpy/#numpy-array-indexing","title":"NumPy Array Indexing","text":"<p>Array indexing is the same as accessing an array element. You can access an array element by referring to its index number. The indexes in NumPy arrays start with 0, meaning that the first element has index 0, and the second has index 1 etc.</p> <p></p> <p>Code Example : </p> <p><pre><code>arr=np.array([1,2,3,4])\nprint (arr[0])\n</code></pre> To access elements from 2-D arrays we can use comma separated integers representing the dimension and the index of the element.</p> <p></p> <p>Code Example :</p> <p><pre><code>arr=np.array([[1,2,3,4],[4,3,2,1]])\nprint (arr[0][1])\n</code></pre> To access elements from 3-D arrays we can use comma separated integers representing the dimensions and the index of the element. </p> <p></p> <p>Code Example : </p> <p><pre><code>arr=np.array([1,2,3,4],[4,3,2,1],[8,6,7,9])\nprint (arr[0][1][0])\n</code></pre> Use negative indexing to access an array from the end Code Example</p> <pre><code>arr=np.array([1,2,3,4],[4,3,2,1],[8,6,7,9])\nprint (arr[0][-1][-2])\n</code></pre>"},{"location":"numpy/#numpy-array-slicing","title":"NumPy Array Slicing","text":"<p>Slicing in python means taking elements from one given index to another given index. We pass slice instead of index like this [start: end]. We can also define the step, like this [start:end:step].</p> <ul> <li>If we don't pass start its considered 0</li> <li>If we don't pass end its considered length of array in that dimension</li> <li>If we don't pass step its considered 1</li> </ul> <p>Note: The result includes the start index, but excludes the end index. Use the minus operator to refer to an index from the end.</p> <p></p> <p>Code Example :</p> <p><pre><code>arr=np.array([1,2,3,4,5])\nprint (arr[0:5]) #slice arrays from index 0 to 5 excluding 5 print (arr[:4]) #slice from beginning to 4 excluding 4\nprint (arr[2:]) #slice from index 2 onwards\nprint (arr[:-3]) #slice from index -3\n</code></pre> Code Example :</p> <pre><code>arr=np.array([1,2,3,4,5])\nprint (arr[:4:1]) #slice from beginning to 4 step of 1 print (arr[0::3]) #slice from index 0 onwards step of 3 print (arr[:-1:2]) #slice from index -1 step of 2\n</code></pre>"},{"location":"numpy/#array-operations-in-numpy","title":"Array Operations in NumPy","text":"<p>Element-wise Operations : NumPy allows you to perform element-wise operations on arrays. Here are some examples:</p> <pre><code>a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n# Element-wise addition\nc = a + b\nprint(c)  # Output: [5 7 9]\n# Element-wise multiplication\nd = a * b\nprint(d)  # Output: [ 4 10 18]\n</code></pre> <p>Matrix Multiplication : NumPy allows you to perform matrix multiplication using the numpy.dot() function. Here is an example:</p> <pre><code>a = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\n# Matrix multiplication\nc = np.dot(a, b)\nprint(c)\n</code></pre> <p>NumPy Array Reshaping : Reshaping means changing the shape of an array. The shape of an array is the number of elements in each dimension. By reshaping we can add or remove dimensions or change number of elements in each dimension.</p> <p></p> <p>Code Example :</p> <pre><code># we can do it this way\narr=np.array([1,2,3,4,5,6,7,8,9,10])\narr2= arr.reshape(5,2)\nprint (arr)\nprint (arr2)\n# or this way\na = np.array([1, 2, 3, 4, 5, 6])\nb = np.reshape(a, (2, 3))\nprint (a)\nprint (b)\n</code></pre> <p>Transposing Arrays : NumPy provides a way to transpose arrays using the numpy.transpose() function. Here is an example:</p> <p><pre><code>a = np.array([[1, 2], [3, 4], [5, 6]])\nb = np.transpose(a)\nprint(b)\n</code></pre> Aggregation Functions : NumPy provides several aggregation functions that can be used to compute statistics on arrays. Here are some examples:</p> <pre><code>a = np.array([1, 2, 3, 4, 5])\n# Computing the sum of the elements in the array\nprint(np.sum(a))  # Output: 15\n# Computing the mean of the elements in the array\nprint(np.mean(a))  # Output: 3.0\n# Computing the standard deviation of the elements in the array\nprint(np.std(a))  # Output: 1.41421356\n</code></pre>"},{"location":"numpy/#numpy-array-copy-and-view","title":"NumPy Array Copy and View","text":"<p>The main difference between a copy and a view of an array is that the copy is a new array, and the view is just a view, or link to, the original array.</p> <p></p> <p>The copy owns the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy.</p> <p></p> <p>The view does not own the data and any changes made to the view will affect the original array, and any changes made to the original array will affect the view.</p> <p></p> <p>As mentioned, copies owns the data, and views does not own the data, so how can we check if it owns the data or not?</p> <p></p> <p>Every NumPy array has the attribute base that returns None if the array owns the data. Otherwise, the base attribute refers to the original object</p> <p></p> <p>Code example :</p> <pre><code>import numpy as np\narr=np.array([1,2,3,4,5,6])\narrview=arr.view() #creates a view of the array arrcopy=arr.copy() #creates a copy of the array\nprint (arrview.base) #check if the array owns its data print (arrcopy.base) #check if the array owns its data (should output none)\n</code></pre> <p>Documentations NumPy</p>"},{"location":"oop/","title":"Object Oriented Programming in Python","text":""},{"location":"oop/#introduction","title":"Introduction","text":"<p>In the last chapter we learnt the basics of programming, you were shown how to store data in data structures such as lists, strings, integers, dictionaries, and others. And you were shown how to create behavior for your program using keywords, and later using functions to group these keywords. This coding approache is called Logic Programming.</p> <p></p> <p>However, there are different approaches or perspectives in computer programming which we call programming paradigms. They provide various ways of organizing and structuring code to solve a particular problem.</p> <p></p> <p>Each paradigm has its own strengths, weaknesses, and suitability for different types of problems and use cases. Some programming languages may support multiple paradigms, while others may have limited support for one specific paradigm.</p> <p></p> <p>In this course we will get to know the object-oriented programming (OOP), a programming paradigm widely used in Python.</p> <p></p> <p>PS: At this stage of the course, we assume that you know the basics of Python.</p>"},{"location":"oop/#object-oriented-programming-oop","title":"Object-oriented programming (OOP)","text":""},{"location":"oop/#what-is-it","title":"What is it ?","text":"<p>Object-oriented programming (OOP) is an approach that organizes software design based on objects, which are data fields with unique attributes and behaviors, instead of functions and logic. </p>"},{"location":"oop/#why-we-use-it","title":"Why we use it ?","text":"<p>One of the main benefits of OOP is its organization, which makes it easier for developers to collaborate on a project by dividing it into smaller groups. Additionally, OOP offers several other advantages, such as code reusability, scalability, and efficiency.</p>"},{"location":"oop/#oop-basic-concepts","title":"OOP Basic Concepts","text":"<ul> <li> <p>Class: A class is a blueprint for creating objects. It defines a set of attributes (properties) and methods (functions) that the objects created from the class will have. For example, you could create a \"Person\" class with attributes like name, age, and address, and methods like \"introduce\" and \"greet\".</p> </li> <li> <p>Object: An object is an instance of a class. When you create an object from a class, you get a specific \"realization\" of the class, with its own set of attributes and methods. For example, you could create two \"Person\" objects, \"John\" and \"Jane\", each with their own name, age, and address.</p> </li> <li> <p>Attributes: Attributes are the properties or characteristics of an object. They define the state of the object. In the example of the \"Person\" class, the attributes would be name, age, and address.</p> </li> <li> <p>Methods: Methods are the actions or behaviors of an object. They define what the object can do. In the example of the \"Person\" class, the methods would be \"introduce\" and \"greet\".</p> </li> </ul> <p>Here is a simple example of a Python class that defines a \"Person\" object:</p> <p><pre><code>class Person:\ndef __init__(self, name, age, address):\nself.name = name\nself.age = age\nself.address = address\ndef introduce(self):\nreturn f\"Hi, my name is {self.name} and I am {self.age} years old.\"\ndef greet(self, other_person):\nreturn f\"Hello {other_person.name}, it's nice to meet you!\"\n</code></pre> And here is how you can create objects from the \"Person\" class and use their attributes and methods:</p> <pre><code>john = Person(\"John\", 30, \"123 Main St.\")\njane = Person(\"Jane\", 25, \"456 Elm St.\")\nprint(john.introduce())  # Output: Hi, my name is John and I am 30 years old.\nprint(jane.greet(john))  # Output: Hello John, it's nice to meet you!\n</code></pre>"},{"location":"oop/#when-to-use-it","title":"When to use it ?","text":"<ul> <li> <p>Modeling real-world objects: You can create classes to model real-world objects in Python, such as dogs, cars, or books. For example, you can create a \"Dog\" class with properties like breed, name, and age, and methods like \"bark\", \"eat\", and \"sleep\". This makes it easier to manipulate and work with instances of the class, and to keep track of the state of each object.</p> </li> <li> <p>Building games: OOP is often used in game development to model game objects and their behaviors. For example, you can create a \"Player\" class to represent a player in a game, with properties like position, health, and score, and methods like \"move\", \"attack\", and \"jump\".</p> </li> <li> <p>Database applications: You can use OOP to interact with databases in Python. For example, you can create a \"Record\" class to represent a record in a database table, with properties like id, name, and date, and methods like \"insert\", \"update\", and \"delete\".</p> </li> <li> <p>Web development: OOP is commonly used in web development to build applications and services. For example, you can create a \"User\" class to represent a user of your application, with properties like name, email, and password, and methods like \"register\", \"login\", and \"logout\".</p> </li> <li> <p>Scientific simulations: OOP can be used to create scientific simulations, such as physical simulations or financial models. For example, you can create a \"Particle\" class to represent a particle in a physical simulation, with properties like position, velocity, and mass, and methods like \"move\", \"collide\", and \"absorb\".</p> </li> </ul> <p>These are just a few examples of how OOP can be used in Python. With its powerful and flexible object-oriented features, OOP is a widely used paradigm in Python and can be applied to many different types of projects.</p>"},{"location":"oop/#some-examples","title":"Some examples","text":"<ul> <li>Car: Create a class Car that represents a car. The class should have properties brand, model, and year, and a method drive that makes the car drive (print \"Driving the car !\").</li> </ul> <pre><code>## Class implementation\nclass Car:\ndef __init__(self, brand, model, year):\nself.brand = brand\nself.model = model\nself.year = year\ndef drive(self):\nprint(\"Driving the car !\")\n## Object declaration\ncar = Car(\"Toyota\", \"Camry\", 2020)\nprint(car.drive())\n# Output: Driving the car !\n</code></pre> <ul> <li>Dog: Create a class Dog that represents a dog. The class should have properties name, breed, and age, and a method bark that makes the dog bark (print \"Woof!\").</li> </ul> <pre><code>## Class implementation\nclass Dog:\ndef __init__(self, name, breed, age):\nself.name = name\nself.breed = breed\nself.age = age\ndef bark(self):\nprint(\"Woof!\")\n## Object declaration\ndog = Dog(\"Max\", \"Labrador\", 5)\nprint(dog.bark())\n# Output: Woof!\n</code></pre> <p>Let's code !</p>"},{"location":"oop/#operator-overloading","title":"Operator overloading","text":"<p>Operator overloading allows objects of user-defined classes to behave like built-in data types. This means that you can use familiar syntax for objects of your classes, making your code more intuitive and easier to read.</p> <p></p> <p>For example, consider a class for a 2D point:</p> <p><pre><code>class Point2D:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\ndef __str__(self):\nreturn f\"({self.x}, {self.y})\"\n</code></pre> This class defines a 2D point, with x and y coordinates. You can create instances of the class and display them:</p> <p><pre><code>p1 = Point2D(1, 2)\nprint(p1)  # Output: (1, 2)\n</code></pre> Now, if you want to add two points, you can overload the addition operator + by defining the __add__ method:</p> <p><pre><code>class Point2D:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\ndef __str__(self):\nreturn f\"({self.x}, {self.y})\"\ndef __add__(self, other):\nreturn Point2D(self.x + other.x, self.y + other.y)\n</code></pre> With this change, you can now add two points:</p> <pre><code>p1 = Point2D(1, 2)\np2 = Point2D(3, 4)\np3 = p1 + p2\nprint(p3)  # Output: (4, 6)\n</code></pre> <p>In this example, the __add__ method takes another Point2D object as its argument and returns a new Point2D object that represents the sum of the two points. This allows you to use the + operator with instances of your class, just like you would with built-in data types.</p> <p></p> <p>You can also overload other operators, such as -, *, /, &lt;, &gt;, and so on, by defining the corresponding special methods, such as __sub__, __mul__, __truediv__, __lt__, __gt__, and so on. </p> <p></p> <p>Here's an example that overloads the subtraction operator:</p> <p><pre><code>class Point2D:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\ndef __str__(self):\nreturn f\"({self.x}, {self.y})\"\ndef __add__(self, other):\nreturn Point2D(self.x + other.x, self.y + other.y)\ndef __sub__(self, other):\nreturn Point2D(self.x - other.x, self.y - other.y)\n</code></pre> With this change, you can now subtract two points:</p> <pre><code>p1 = Point2D(1, 2)\np2 = Point2D(3, 4)\np3 = p1 - p2\nprint(p3)  # Output: (-2, -2)\n</code></pre>"},{"location":"oop/#cheat-sheet-for-class-special-methods","title":"Cheat sheet for Class Special Methods:","text":"Operator Method String representation __str__ Addition (+) __add__ Subtraction (-) __sub__ Multiplication (*) __mul__ Power (**) __pow__ Division (/) __truediv__ Floor Division (//) __floordiv__ Remainder (modulo)(%) __mod__ Lesser than (&lt;) __lt__ Greater than (&gt;) __gt__ Lesser than or equal (&lt;=) __le__ Greater than or equal (&gt;=) __ge__ Equal (==) __eq__ Not equal (!=) __ne__ Absolute value (abs()) __abs__ Bitwise AND(&amp;) __and__ Bitwise OR (|) __or__ Bitwise NOT(~) __invert__"},{"location":"oop/#inheritance-in-object-oriented-programming","title":"Inheritance in Object-Oriented Programming","text":""},{"location":"oop/#what-is-it_1","title":"What is it ?","text":"<p>Inheritance is a mechanism in Object-Oriented Programming (OOP) that allows a new class to be defined based on an existing class. The new class, known as the subclass, inherits attributes and behavior from the existing class, known as the superclass. This enables code reuse, allowing new classes to be defined with little or no modifications to the existing classes.</p> <p>For example, consider a superclass called Animal which has attributes such as name, species, and age, and a method called make_sound() that returns the sound the animal makes. We can create a subclass of Animal called Dog which inherits all of the attributes and behavior of the Animal class. We can also add additional attributes specific to dogs such as breed and override the make_sound() method to return the specific sound a dog makes, like \"bark\".</p> <pre><code>class Animal:\ndef __init__(self, name, species, age):\nself.name = name\nself.species = species\nself.age = age\ndef make_sound(self):\nreturn \"Sound made by the animal\"\nclass Dog(Animal):\ndef __init__(self, name, breed, age):\nAnimal.__init__(self, name, \"Dog\", age)\nself.breed = breed\ndef make_sound(self):\nreturn \"Bark\"\ndog = Dog(\"Rufus\", \"Labrador\", 5)\nprint(dog.name) # Rufus\nprint(dog.species) # Dog\nprint(dog.age) # 5\nprint(dog.breed) # Labrador\nprint(dog.make_sound()) # Bark\n</code></pre> <p>In this example, the Dog class inherits the attributes name, species, and age from the Animal class and also adds an additional attribute breed. The method make_sound() is also overridden in the Dog class to return a specific sound for dogs.</p> <p>Inheritance provides a way to model relationships between classes, and is an important concept in OOP for code reuse and organization. In Python, inheritance is an is-a relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example,</p> <ul> <li>Car is a Vehicle</li> <li>Student is a Person</li> <li>Cat is an Animal</li> </ul> <p>Here, Car can inherit from Vehicle, Apple can Student from Person, and so on.</p>"},{"location":"oop/#polymorphism-and-abstraction","title":"Polymorphism and Abstraction","text":"<ul> <li> <p>Polymorphism : Is the ability of an object to take on multiple forms. It allows objects of different classes to be treated as objects of the same class. This means that you can write a single function or method that can work with objects of different classes, as long as they implement the same interface.</p> </li> <li> <p>Abstraction : Is a technique that allows you to simplify complex systems by ignoring irrelevant details and focusing on the essential features of an object. It is achieved by defining an interface that exposes the essential features of an object, while hiding the implementation details.</p> </li> </ul> <p>Here's an example in Python to demonstrate the difference between polymorphism and abstraction:</p> <pre><code>from abc import ABC, abstractmethod\nclass Shape(ABC):\n@abstractmethod\ndef area(self):\npass\nclass Rectangle(Shape):\ndef __init__(self, width, height):\nself.width = width\nself.height = height\ndef area(self):\nreturn self.width * self.height\nclass Circle(Shape):\ndef __init__(self, radius):\nself.radius = radius\ndef area(self):\nreturn 3.14 * self.radius * self.radius\ndef print_area(shape):\nprint(shape.area())\nrect = Rectangle(10, 20)\ncirc = Circle(5)\nprint_area(rect) # 200\nprint_area(circ) # 78.5\n</code></pre> <p>In this example, the Shape class serves as an abstract class and defines an abstract method area. The Rectangle and Circle classes inherit from Shape and provide their own implementation of the area method. </p> <p></p> <p>This demonstrates polymorphism, as objects of different classes (Rectangle and Circle) can be treated as objects of the same class (Shape). The print_area function demonstrates polymorphism, as it can accept objects of different classes (Rectangle and Circle) as long as they implement the same interface (area method).</p> <p></p> <p>At the same time, the Shape class demonstrates abstraction by defining an interface that exposes the essential features of a shape, while hiding the implementation details. The Rectangle and Circle classes implement the area method, but the details of the implementation are hidden from the user. The user only sees the essential features of the object (the area method).</p>"},{"location":"oop/#multiple-and-multilevel-inheritance","title":"Multiple and Multilevel Inheritance","text":"<ul> <li> <p>Multiple Inheritance: is a feature of Object Oriented Programming (OOP) languages where a class can inherit properties and attributes from more than one parent class. This means that a single class can have multiple base classes and it can inherit properties and attributes from all of them. </p> <p>For example, consider a scenario where you have two classes: Shape and Color. The class Shape defines the properties of a 2-D shape such as its area, perimeter, etc. The class Color defines the color of an object. Now, you want to create a new class Rectangle which is a shape and has a color. You can achieve this by using multiple inheritance. </p> </li> </ul> <p>Here's an example implementation in Python:</p> <pre><code>class Shape:\ndef __init__(self, width, height):\nself.width = width\nself.height = height\ndef area(self):\nreturn self.width * self.height\ndef perimeter(self):\nreturn 2 * (self.width + self.height)\nclass Color:\ndef __init__(self, color):\nself.color = color\nclass Rectangle(Shape, Color):\npass\nrect = Rectangle(10, 20, 'red')\nprint(rect.area())\nprint(rect.perimeter())\nprint(rect.color)\n</code></pre> <p>In this example, the class Rectangle inherits from both Shape and Color classes. This means that it has all the attributes and methods defined in both the classes.</p> <p></p> <ul> <li> <p>Multilevel Inheritance : is a type of inheritance where a class inherits properties and attributes from its parent class, and the parent class inherits from its parent class, and so on.</p> <p>For example, consider a scenario where you have a class Animal which defines basic properties of an animal such as its name, age, and breed. Another class Mammal inherits from Animal class and adds new properties such as type of fur, etc. Finally, a new class Cat is created which inherits from Mammal class and adds new properties specific to cats such as the type of meow, etc. </p> </li> </ul> <p>Here's an example implementation in Python:</p> <pre><code>class Animal:\ndef __init__(self, name, age, breed):\nself.name = name\nself.age = age\nself.breed = breed\nclass Mammal(Animal):\ndef __init__(self, name, age, breed, fur_type):\nAnimal.__init__(self, name, age, breed)\nself.fur_type = fur_type\nclass Cat(Mammal):\ndef __init__(self, name, age, breed, fur_type, meow_type):\nMammal.__init__(self, name, age, breed, fur_type)\nself.meow_type = meow_type\ncat = Cat('Tom', 3, 'Siamese', 'short hair', 'loud')\nprint(cat.name)\nprint(cat.age)\nprint(cat.breed)\nprint(cat.fur_type)\nprint(cat.meow_type)\n</code></pre> <p>In this example, the class Cat inherits from the class Mammal which in turn inherits from the class Animal. This creates a hierarchy of classes where each class inherits properties and attributes from its parent class.</p>"},{"location":"pd/","title":"Understanding & working with Pandas","text":""},{"location":"pd/#pandas","title":"Pandas","text":""},{"location":"pd/#introduction-to-pandas","title":"Introduction to Pandas","text":"<p>Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data. </p> <p></p> <p>Pandas allows us to :</p> <ul> <li>Analyze big data and make conclusions based on statistical theories.</li> <li>Clean messy data sets, and make them readable and relevant. Relevant data is very important in data science. </li> <li>Pandas gives you answers about the data Such as : Is there a correlation between two or more columns? What is the average value? Max value? Min value?</li> <li>Manage diffrent data sets merging them filtering them etc...</li> </ul> <p></p> <p>Pandas is also able to delete rows that are not relevant, or contain wrong values, like empty or NULL values. This is called cleaning the data.</p> <p></p> <p>To start using Pandas, you first need to install it. You can install it using the following command:</p> <pre><code>!pip install pandas\n</code></pre> <p>After installing pandas, you can import it as follows: </p> <pre><code>import pandas as pd\n</code></pre>"},{"location":"pd/#pandas-data-structures","title":"Pandas Data Structures","text":"<p>Pandas provides two main data structures: Series and DataFrame. A Series is a one-dimensional array-like object that can hold any data type. A DataFrame is a two-dimensional table that can hold data of different types in columns.</p>"},{"location":"pd/#series","title":"Series","text":"<p>A Pandas Series is like a column in a table. It is a one-dimensional array holding data of any type</p> <pre><code>import pandas as pd\ndataset1=[1, 3, 5, np.nan, 6, 8]\ndf1=pd.Series(dataset1)\nprint (df1)\n</code></pre> <p>If nothing else is specified, the values are labeled with their index number. The first value has index 0, etc. This label can be used to access a specified value. With the index argument, you can name your own labels. When using labels, you can access an item by using the label. Code example : </p> <pre><code>import pandas as pd\ndataset1=[1, 3, 5, np.nan, 6, 8]\ndf1=pd.Series(dataset1, index=[\"a\",\"b\",\"c\",\"e\",\"f\",\"g\"])\nprint (df1)                     \nprint (df1[\"a\"])\n</code></pre> <p>We can also use key/value pair objects like dictionaries when creating a Series</p> <p></p> <p>Note: The keys of the dictionary become the labels</p> <p></p> <p>Code example : <pre><code>import pandas as pd\ndataset1={\"Vehicle number\":1, \"Wheels\":4, \"Doors\":4}\ndf1=pd.Series(dataset1)\nprint (df1)\n</code></pre></p>"},{"location":"pd/#dataframe","title":"DataFrame","text":"<p>Data sets in Pandas are usually multi-dimensional tables, called DataFrames. Series can be considered to be like a column in a table, whereas a DataFrame can be considered to be the table. </p> <p></p> <p>A DataFrame can be created in several ways. One way is to pass a dictionary of lists to the pd.DataFrame() function. Each key in the dictionary represents a column name, and each list represents the data in that column.</p> <p><pre><code>data = {'name': ['Alice', 'Bob', 'Charlie', 'David'],\n'age': [25, 32, 18, 47],\n'gender': ['F', 'M', 'M', 'M']}\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre> We can use the loc attribute to locate one or more rows. Just as with series, we can name indexes of data frames and locate them using the loc attribute</p> <p></p> <p>Code example :</p> <pre><code>import pandas as pd\ndataset1={\"Vehicle number\":[1,2,3], \"Wheels\":[4,2,4], \"Doors\":[4,0,5]}\ndf1=pd.DataFrame(dataset1, index=[\"Car\",\"Motorcycle\",\"Van\"])\nprint(df1)\nprint (df1.loc[\"Car\"])              \n</code></pre>"},{"location":"pd/#data-import-and-export","title":"Data Import and Export","text":"<p>Pandas supports reading and writing data from and to various file formats, such as CSV, Excel, SQL databases, and more.</p> <ul> <li>CSV : A simple way to store big data sets is to use CSV (Comma Separated Value) files. CSV files contain plain text and are a well know format that can be read by almost all software including Pandas. To read a CSV file, you can use the pd.read_csv() function. The function takes the path to the CSV file as an argument and returns a DataFrame. To write a DataFrame to a CSV file, you can use the to_csv() method. Code example :</li> </ul> <pre><code>import pandas as pd\n## Importing a CSV file\ndf = pd.read_csv('data.csv')\nprint(df)\n## Export a CSV file\ndf.to_csv('data.csv', index=False)#The index=False argument tells Pandas not to write the row index to the CSV file.\n</code></pre> <ul> <li>Excel : To read an Excel file, you can use the pd.read_excel() function. The function takes the path to the Excel file as an argument and returns a DataFrame. To write a DataFrame to an Excel file, you can use the to_excel() method.</li> </ul> <p><pre><code>## Importing a Excel file\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet1')\nprint(df)\n## Export a Excel file\ndf.to_excel('data.xlsx', sheet_name='Sheet1', index=False)\n</code></pre> - SQL Databases : To read data from a SQL database, you can use the pd.read_sql() function. The function takes a SQL query and a connection object as arguments and returns a DataFrame. To write a DataFrame to a SQL database, you can use the to_sql() method.</p> <pre><code>import sqlite3\n## Importing a SQL file\nconn = sqlite3.connect('mydatabase.db')\nquery = 'SELECT * FROM mytable'\ndf = pd.read_sql(query, conn)\nprint(df)\n## Export a SQL file\ndf.to_sql('mytable', conn, if_exists='replace', index=False) #The if_exists='replace' argument tells Pandas to replace the table if it already exists in the database.\n</code></pre>"},{"location":"pd/#getting-a-quick-overview-of-the-dataframes-content","title":"Getting a quick overview of the Dataframes content","text":"<ul> <li> <p>One of the most used method for getting a quick overview of the DataFrame, is the head() method. The head() method returns the headers and a specified number of rows, starting from the top. </p> </li> <li> <p>The tail() method returns the last rows of the DataFrame</p> </li> <li> <p>The DataFrame object has a method called info(), that gives you more information about the data set.</p> </li> </ul> <p>Code Example :</p> <pre><code>import pandas as pd \ndf=pd.read_csv(\"data.csv\") \nprint (df.head())\nprint (df.tail()) \ndf.info()\n</code></pre>"},{"location":"pd/#data-cleaning-with-pandas","title":"Data Cleaning with pandas","text":"<p>Data cleaning means fixing bad data in your data set it is an essential step in data analysis. Pandas provides several functions and methods for cleaning and preparing data. Examples of bad data include : </p>"},{"location":"pd/#empty-cells","title":"Empty cells","text":"<p>Empty cells can potentially give you a wrong result when you analyze data. One way to deal with empty cells is to remove rows that contain empty cells. This usually works since data sets can be very large, and removing a few rows will not have a significant impact on the results. </p> <p></p> <p>To detect empty cells we can use : </p> <p><pre><code>df.isnull().value_counts()\n</code></pre> To remove empty cells, we can use the dropna() method. By default, the dropna() method returns a new DataFrame, and will not change the original. If you want to change the original DataFrame, use the inplace = True argument. Code Example :</p> <p><pre><code>import pandas as pd                     \ndf=pd.read_csv(\"data.csv\")\nprint (df)\ndf.dropna(inplace=True)\nprint (df)\n</code></pre> Another way of dealing with empty cells is to insert a new value to replace the empty cell. This way you do not have to delete entire rows just because of some empty cells. The fillna() method allows us to replace empty cells with a value. To only replace empty values for one column, specify the column name for the DataFrame. Code Example :</p> <pre><code>import pandas as pd\ndf=pd.read_csv(\"data.csv\")\ndf.fillna(130, inplace=True)\ndf[\"Calories\"].fillna(130, inplace=True)\nprint(df.to_string())\n</code></pre> <p>You can also fill in empty cells with the mean, median or mode of the column. Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column</p> <ul> <li>Mean : the mean is the average value (the sum of all values divided by number of values)</li> <li>Median : the median is the value in the middle, after you have sorted all values ascending</li> <li>Mode : the mode is the value that appears most frequently</li> </ul> <p>Code Example : </p> <pre><code>import pandas as pd\ndf=pd.read_csv(\"data.csv\")\nmeancal=df[\"Calories\"].mean()\nmediancal=df[\"Calories\"].median()\nmodecal=df[\"Calories\"].mode()\nprint (\"The mean of calories is\" + str(meancal) + \" The median of calories is \" + str(mediancal) + \" The mode of calories is \" + str(modecal)) \nmeandf=df[\"Calories\"].fillna(meancal)\nmediandf=df[\"Calories\"].fillna(mediancal)\nmodedf=df[\"Calories\"].fillna(modecal)\nprint(meandf.to_string())\nprint(mediandf.to_string())\nprint(modedf.to_string())\n</code></pre>"},{"location":"pd/#data-in-wrong-format","title":"Data in wrong format","text":"<p>Cells with data of incorrect format can make it difficult, or even impossible, to analyze data.</p> <p></p> <p>To remedy this, you can either remove the rows, or convert all cells in the columns into the same format</p>"},{"location":"pd/#incorrect-data","title":"Incorrect Data","text":"<p>Incorrect data does not have to be empty cells or incorrect format, it can just be incorrect, like if someone entered 199 instead of 1.99. Sometimes you can spot incorrect data by looking at the data set because you have an expectation of what it should be.</p> <p></p> <p>If you take a look at our data set you can see that in row 7 the duration is 450, but for all the other rows the duration is between 30 and 60. It doesn't have to be incorrect, but taking in consideration that this is the data set of someone's workout sessions, we conclude this person did not work out for 450 minutes</p> <p></p> <p>One way to fix wrong values is to replace them with something else. For small data sets you might be able to replace the wrong data one by one, but not for large data sets. To replace wrong data for larger data sets you can create some rules and set some boundaries for legal values, and replace any values that are outside of the boundaries</p> <p></p> <p>Another way of handling incorrect data is to remove the rows that contains incorrect data. This way you do not have to find out what to replace them with, and there is a good chance you do not need them for analysis.</p> <p></p> <p>Code Example</p> <pre><code>import pandas as pd \ndf1=pd.read_csv(\"data.csv\")\ndf2=pd.read_csv(\"data.csv\")\nfor x in df1.index: #replace all values in duration above 120 with 120 \nif df1.loc[x, \"Duration\"] &gt; 120:\ndf1.loc[x,\"Duration\"] = 120\nfor y in df2.index: #drop all values above 120\nif df2.loc[y, \"Duration\"] &gt;120:\ndf2.drop(y, inplace = True) \nprint(dataframe1.to_string())\nprint(dataframe2.to_string())\n</code></pre>"},{"location":"pd/#wrong-data-duplicates","title":"Wrong data Duplicates","text":"<p>Duplicate rows are rows that have been entered more than once. By taking a look at our test data set, we can assume that row 11 and 12 are duplicates</p> <p></p> <p>To discover duplicates, we can use the duplicated() method The duplicated() method returns a Boolean values for each row To remove duplicates, use the drop_duplicates() method. Code Example :</p> <pre><code>import pandas as pd\ndf1=pd.read_csv(\"data.csv\")\ndf1.duplicated().value_counts() #search for duplicates and output true when found \ndf1.drop_duplicates(inplace = True) #drop all duplicates\ndf1\n</code></pre>"},{"location":"pd/#merging-and-joining-data","title":"Merging and Joining Data","text":"<p>Pandas provides several functions and methods for merging and joining DataFrames.</p> <p></p> <p>To merge two DataFrames based on a common column, you can use the merge() method.</p> <pre><code>df1 = pd.DataFrame({'id': [1, 2, 3, 4], 'name': ['Alice', 'Bob', 'Charlie', 'David']})\ndf2 = pd.DataFrame({'id': [1, 2, 3, 4], 'age': [25, 32, 18, 47]})\nmerged_df = pd.merge(df1, df2, on='id')  # Merge DataFrames on 'id' column\nprint(merged_df)\n</code></pre> <p>The merge() method merges the two DataFrames based on the 'id' column. The result is a new DataFrame with columns from both DataFrames.</p> <p></p> <p>To join two DataFrames based on a common column, you can use the join() method.</p> <pre><code>df1 = pd.DataFrame({'id': [1, 2, 3, 4], 'name': ['Alice', 'Bob', 'Charlie', 'David']})\ndf2 = pd.DataFrame({'id': [1, 2, 3, 4], 'age': [25, 32, 18, 47]})\njoined_df = df1.set_index('id').join(df2.set_index('id'))  # Join DataFrames on 'id' column\nprint(joined_df)\n</code></pre> <p>The join() method joins the two DataFrames based on the 'id' column. The result is a new DataFrame with columns from both DataFrames.</p>"},{"location":"pd/#data-analysis-in-pandas","title":"Data Analysis in Pandas","text":""},{"location":"pd/#describe-in-pandas","title":"Describe in Pandas","text":"<p>The describe() method in Pandas provides summary statistics of a DataFrame. It calculates several common statistics for each numerical column in the DataFrame, such as count, mean, standard deviation, minimum, maximum, and quartiles. Code Example :</p> <pre><code>import pandas as pd\ndf1=pd.read_csv(\"data.csv\") \ndf1.describe()\n</code></pre>"},{"location":"pd/#correlation-in-pandas","title":"Correlation in Pandas","text":"<p>The corr() method calculates the relationship between each column in your data set. The corr() method ignores \"not numeric\" columns. Code Example : </p> <p><pre><code>import pandas as pd\ndf1=pd.read_csv(\"data.csv\") \ndf1.corr()\n</code></pre> </p> <p>The Result of the corr() method is a table with a lot of numbers that represents how well the relationship is between two columns. The number varies from -1 to 1 such as :</p> <ul> <li> <p>1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each time a value went up in the first column, the other one went up as well.</p> </li> <li> <p>0.9 is also a good relationship, and if you increase one value, the other will probably increase as well.</p> </li> <li> <p>-0.9 would be just as good relationship as 0.9, but if you increase one value, the other will probably go down</p> </li> <li> <p>0.2 means NOT a good relationship, meaning that if one value goes up does not mean that the other will</p> </li> </ul> <p>What is a good correlation? It depends on the use, but I think it is safe to say you have to have at least 0.6 (or -0.6) to call it a good correlation</p> <p></p> <p>Perfect Correlation: We can see that \"Duration\" and \"Duration\" got the number 1.000000, which makes sense, each column always has a perfect relationship with itself.</p> <p>Good Correlation: \"Duration\" and \"Calories\" got a 0.922721 correlation, which is a very good correlation, and we can predict that the longer you work out, the more calories you burn, and the other way around: if you burned a lot of calories, you probably had a long work out</p> <p>Bad Correlation: \"Duration\" and \"Maxpulse\" got a 0.009403 correlation, which is a very bad correlation, meaning that we can not predict the max pulse by just looking at the duration of the work out, and vice versa</p>"},{"location":"plt/","title":"Understanding & working with Matplotlib","text":""},{"location":"plt/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib is a popular data visualization library in Python that provides a wide range of tools for creating static, animated, and interactive visualizations. It is widely used in scientific computing, data analysis, and machine learning.</p> <p></p> <p>Matplotlib allows you to create a variety of plots, including line plots, scatter plots, bar plots, histogram plots, and more. It provides a high level of customization to create professional-looking plots with minimal coding.</p> <p></p> <p>In this course, we will cover the basics of Matplotlib and walk through several examples to illustrate how to create different types of plots using Matplotlib.</p>"},{"location":"plt/#installing-and-importing-matplotlib","title":"Installing and importing Matplotlib","text":"<p>From the terminal type: </p> <p><pre><code>pip install matplotlib\n</code></pre> For Jupyter in the command prompt type: </p> <pre><code>!pip install matplotlib\n</code></pre> <p>Matplotlib is available preinstalled on Anaconda3 Jupyter Notebook.</p> <p></p> <p>Once Matplotlib is installed, import it in your applications by adding the import module statement. You can also check which version of Matplotlib you have installed. Code example :</p> <pre><code>import matplotlib #importing matplotlib into your code \nprint(matplotlib.__version__) #checking installed version Matplotlib\n</code></pre> <p>Most of Matplotlib\u2019s utility is in the pyplot sub-module, and its usually imported under the plt alias. Code Example :</p> <pre><code>import matplotlib.pyplot as plt\n</code></pre> <p>Now let's create a simple plot using Matplotlib. We will plot a line chart of the sine function between 0 and 2\u03c0.</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n# Generate data\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n# Plot data\nplt.plot(x, y)\n# Show plot\nplt.show()\n</code></pre> <p>In this example, we first generated the data by creating an array x using the linspace function of NumPy, which creates 100 evenly spaced numbers between 0 and 2\u03c0. We then computed the sine function of x using the NumPy sin function and stored it in an array y.</p> <p></p> <p>To create the plot, we called the plot function of Matplotlib and passed x and y as arguments. This created a line chart of the sine function. Finally, we called the show function to display the plot.</p>"},{"location":"plt/#basic-plotting-with-matplotlib","title":"Basic Plotting with Matplotlib","text":""},{"location":"plt/#line-plot","title":"Line Plot","text":"<p>The most basic type of plot in Matplotlib is a line plot, which displays data as a series of points connected by straight lines. To create a line plot in Matplotlib, we use the plot function, which takes two arrays of data as arguments: x and y</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.plot(x, y)\n# Show plot\nplt.show()\n</code></pre>"},{"location":"plt/#scatter-plot","title":"Scatter Plot","text":"<p>A scatter plot is a type of plot that displays data as a collection of points. To create a scatter plot in Matplotlib, we use the scatter function, which takes two arrays of data as arguments: x and y.</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.scatter(x, y)\n# Show plot\nplt.show()\n</code></pre> <p>In this example, we used the <code>scatter</code> function of Matplotlib to create a scatter plot of the data. We passed <code>x</code> and <code>y</code> as arguments to the function, which created a scatter plot with five points.</p>"},{"location":"plt/#bar-plot","title":"Bar Plot","text":"<p>A bar plot is a type of plot that displays data as a series of bars. To create a bar plot in Matplotlib, we use the <code>bar</code> function, which takes two arrays of data as arguments: <code>x</code> and <code>y</code>.</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.bar(x, y)\n# Show plot\nplt.show()\n</code></pre> <p>In this example, we used the bar function of Matplotlib to create a bar plot of the data. We passed x and y as arguments to the function, which created a bar plot with five bars. If you want the bars to be displayed horizontally instead of vertically, use the barh() function. </p>"},{"location":"plt/#histogram-plot","title":"Histogram Plot","text":"<p>A histogram plot is a type of plot that displays the distribution of a dataset. To create a histogram plot in Matplotlib, we use the hist function, which takes an array of data as argument: x.</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n# Data\nx = np.random.randn(1000)\n# Plot data\nplt.hist(x, bins=20)\n# Show plot\nplt.show()\n</code></pre> <p>In this example, we first generated random data using the NumPy randn function. We then used the hist function of Matplotlib to create a histogram plot of the data. We passed x as an argument to the function and set the number of bins to 20 using the bins parameter.</p>"},{"location":"plt/#pie-charts-plot","title":"Pie Charts Plot","text":"<p>With Pyplot, you can use the pie() function to draw pie charts. Code Example :</p> <p><pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n# Data\ny = np.array([35, 25, 25, 15])\nplt.pie(y) \nplt.show()\n</code></pre> In this example, we created two lists x and y containing five numbers each. We then called the plot function and passed x and y as arguments. This created a line plot of the data.</p>"},{"location":"plt/#customizing-plots-with-matplotlib","title":"Customizing Plots with Matplotlib","text":"<p>Matplotlib provides a wide range of customization options to create professional-looking plots. In this section, we will cover some of the most common customization options.</p>"},{"location":"plt/#adding-titles-and-labels","title":"Adding Titles and Labels","text":"<p>To add a title to a plot in Matplotlib, we use the title function, which takes a string as argument: title. We can also add labels to the x and y axes using the xlabel and ylabel functions.</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.plot(x, y)\n# Add title and labels\nplt.title('Line Plot')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n# Show plot\nplt.show()\n</code></pre>"},{"location":"plt/#changing-colors-and-styles","title":"Changing Colors and Styles","text":"<p>Matplotlib allows you to customize the colors and styles of the plot elements, such as lines, markers, and bars.</p> <p>Colors : By default, Matplotlib uses a default color cycle to distinguish between different lines in a plot. We can change the color of a line using the color parameter of the plotting function. For example:</p> <p><pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.plot(x, y)\n# Add title and labels\nplt.title('Line Plot', color='red')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n# Show plot\nplt.show()\n</code></pre> This will plot the data using a red line. We can also use a variety of named colors such as blue, green, orange, purple, brown, and gray. We can also use color maps to map numerical values to colors. Matplotlib provides several built-in color maps, such as viridis, plasma, inferno, and magma. Here's an example:</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Get the weight of each point\nz = np.random.rand(5)\n# Plot using color map \nplt.scatter(x, y, c=z ,cmap='plasma')\nplt.colorbar()\n</code></pre> <p>This will plot a scatter plot where the color of each point is determined by the corresponding value of z. The cmap parameter specifies the name of the color map to use, and the colorbar() function adds a color bar to the plot.</p> <p></p> <p>Line Styles : We can also change the style of lines in a plot using the linestyle parameter of the plotting function. Matplotlib provides several built-in line styles, such as solid lines ('-'), dashed lines ('--'), dotted lines (':'), and dash-dot lines ('--'). Here's an example:</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.plot(x, y, linestyle='--')\n# Add title and labels\nplt.title('Line Plot', color='red')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n# Show plot\nplt.show()\n</code></pre> <p>This will plot the data using a dashed line. We can also combine line styles with markers, as shown in the following example:</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n# Plot data\nplt.plot(x, y, linestyle='--', marker='o', markersize=10)\n# Add title and labels\nplt.title('Line Plot', color='red')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n# Show plot\nplt.show()\n</code></pre> <p>This will plot the data using a dashed line with circular markers. The markersize parameter controls the size of the markers.</p>"},{"location":"plt/#subplots","title":"Subplots","text":"<p>Subplots are useful when you want to display multiple plots in one figure. Matplotlib provides several ways to create subplots, and the simplest is the plt.subplots() function. Here is an example of creating a figure with two subplots, side by side:</p> <pre><code>import matplotlib.pyplot as plt\n# Data\nx = [1, 2, 3, 4, 5]\ny1 = [2, 4, 6, 8, 10]\ny2 = [3, 5, 7, 9, 11]\n# Plot data\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n# first figure\naxs[0].plot(x, y1)\n# Add title to first figure\naxs[0].set_title('Plot 1')\n# second figure\naxs[1].plot(x, y2)\n# Add title to second figure\naxs[1].set_title('Plot 2')\n# Show plot\nplt.show()\n</code></pre> <p>The first argument of plt.subplots() specifies the number of rows, and the second argument specifies the number of columns of subplots. In this example, we create one row and two columns of subplots. The figsize parameter specifies the size of the figure in inches.</p> <p></p> <p>The function returns two objects: the fig object that represents the whole figure and the axs object that represents the array of subplots. We can use indexing to access individual subplots. In this example, axs[0] represents the left subplot, and axs[1] represents the right subplot.</p> <p></p> <p>We can plot data on each subplot by calling plotting functions on the corresponding axs object. We can also set individual titles for each subplot using the set_title() method of each axs object.</p>"},{"location":"plt/#saving-figures-in-matplotlib","title":"Saving Figures in Matplotlib","text":"<p>Matplotlib provides several ways to save figures to files, such as PNG, PDF, SVG, and EPS. The simplest way is to use the savefig() function:</p> <pre><code>plt.savefig('figure.png')\n</code></pre> <p>This will save the current figure to a file named figure.png in the current directory. The file format is inferred from the file extension. </p>"},{"location":"sns/","title":"Understanding & working with Seaborn","text":""},{"location":"sns/#seaborn","title":"Seaborn","text":"<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics. Seaborn helps you explore and understand your data. Its plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots. </p> <p></p> <p>Its dataset-oriented, declarative API lets you focus on what the different elements of your plots mean, rather than on the details of how to draw them.</p>"},{"location":"sns/#installing-and-importing-seaborn","title":"Installing and importing Seaborn","text":"<ul> <li>In your terminal type</li> </ul> <pre><code>pip install seaborn\n</code></pre> <ul> <li>If using jupyter type : </li> </ul> <pre><code>!pip install seaborn\n</code></pre> <ul> <li>To import Seaborn in your code : </li> </ul> <pre><code>import seaborn as sns\n</code></pre>"},{"location":"sns/#loading-data-from-seaborn","title":"Loading Data from Seaborn","text":"<p>First, we need to import Seaborn and load some data to work with. In this course, we will use the tips dataset, which is included in Seaborn. The tips dataset contains information about the bills and tips at a restaurant.</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\ntips = sns.load_dataset('tips')\n</code></pre> <p>The tips dataset has several columns:</p> <ul> <li>total_bill: the total bill amount (including tip)</li> <li>tip: the tip amount</li> <li>sex: the gender of the person who paid the bill (male or female)</li> <li>smoker: whether the person was a smoker or not (yes or no)</li> <li>day: the day of the week</li> <li>time: whether the meal was lunch or dinner</li> <li>size: the number of people in the party</li> </ul>"},{"location":"sns/#creating-plots-with-seaborn","title":"Creating Plots with Seaborn","text":""},{"location":"sns/#scatter-plot","title":"Scatter Plot","text":"<p>One of the most basic types of plot is a scatter plot, which shows the relationship between two variables. We can create a scatter plot using Seaborn's scatterplot function.</p> <p><pre><code>sns.scatterplot(x='total_bill', y='tip', data=tips)\nplt.show()\n</code></pre> This will create a scatter plot of the total bill versus the tip amount.</p>"},{"location":"sns/#line-plot","title":"Line Plot","text":"<p>Another type of plot is a line plot, which shows the relationship between two variables over time. We can create a line plot using Seaborn's lineplot function.</p> <pre><code>sns.lineplot(x='size', y='total_bill', data=tips)\nplt.show()\n</code></pre> <p>This will create a line plot of the size versus the total bill amount over time.</p>"},{"location":"sns/#bar-plot","title":"Bar Plot","text":"<p>A bar plot is useful for showing comparisons between different categories. We can create a bar plot using Seaborn's barplot function.</p> <pre><code>sns.barplot(x='day', y='total_bill', data=tips)\nplt.show()\n</code></pre> <p>This will create a bar plot of the total bill for each day of the week.</p>"},{"location":"sns/#histogram","title":"Histogram","text":"<p>A histogram is useful for showing the distribution of a single variable. We can create a histogram using Seaborn's histplot function.</p> <p><pre><code>sns.histplot(x='total_bill', data=tips)\nplt.show()\n</code></pre> This will create a histogram of the total bill.</p>"},{"location":"sns/#box-plot","title":"Box Plot","text":"<p>A box plot is useful for showing the distribution of a variable across different categories. We can create a box plot using Seaborn's boxplot function.</p> <pre><code>sns.boxplot(x='day', y='total_bill', data=tips)\nplt.show()\n</code></pre> <p>This will create a box plot of the total bill for each day of the week.</p>"},{"location":"sns/#violin-plot","title":"Violin Plot","text":"<p>A violin plot is similar to a box plot, but it also shows the distribution of the variable. We can create a violin plot using Seaborn's violinplot function.</p> <pre><code>sns.violinplot(x='day', y='total_bill', data=tips)\nplt.show()\n</code></pre> <p>This will create a violin plot of the total bill for each day of the week.</p>"},{"location":"sns/#pair-plots","title":"Pair Plots","text":"<p>Seaborn's pairplot function can be used to create scatter plots of pairs of variables in a dataset. By default, it plots the scatter plot between each pair of numerical variables, and a histogram of each variable on the diagonal. It is a useful tool to visualize the relationships between multiple variables at once. Example :</p> <pre><code>import seaborn as sns\nimport pandas as pd\niris = sns.load_dataset('iris')\nsns.pairplot(iris, hue='species')\n</code></pre>"},{"location":"sns/#heatmaps","title":"Heatmaps","text":"<p>Seaborn's heatmap function allows you to create a heatmap of a matrix of values, with each cell colored according to its value. Heatmaps are useful for visualizing large amounts of data and identifying patterns within the data. Example : </p> <pre><code>import seaborn as sns\nimport numpy as np\n# Create a matrix of random values\ndata = np.random.rand(10, 10)\n# Create a heatmap\nsns.heatmap(data)\n</code></pre>"},{"location":"sns/#facetgrid","title":"FacetGrid","text":"<p>Seaborn's FacetGrid function allows you to create a grid of plots based on the levels of one or more categorical variables. This is useful when you want to visualize relationships between variables for different groups or categories. Example:</p> <pre><code>import seaborn as sns\nimport pandas as pd\n# Load the tips dataset\ntips = sns.load_dataset(\"tips\")\n# Create a FacetGrid\ng = sns.FacetGrid(tips, col=\"time\", row=\"sex\")\n# Map the plot to the FacetGrid\ng.map(sns.scatterplot, \"total_bill\", \"tip\")\n</code></pre>"},{"location":"sns/#styling-plots","title":"Styling Plots","text":"<p>Seaborn provides several functions for styling your plots, including setting the plot background, changing the color palette, and adjusting the font size and style. Example:</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n# Set the plot background color\nsns.set_style(\"darkgrid\")\n# Load the tips dataset\ntips = sns.load_dataset(\"tips\")\n# Set the color palette\nsns.set_palette(\"husl\")\n# Create a scatter plot\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"sex\", size=\"size\")\n# Set the title and axis labels\nplt.title(\"Tips by Total Bill\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n# Set the font size and style\nsns.set(font_scale=1.5, font=\"Arial\")\n</code></pre>"},{"location":"sql/01_sql_intro/","title":"Introduction to DBMS","text":""},{"location":"sql/01_sql_intro/#introduction","title":"Introduction","text":"<p>Welcome to the Database Management Systems course! In this course, you will learn how to use SQL to work with databases (extract, insert, delete and analyse data). Databases are an essential part of modern computing, and they are used in everything from social media applications to e-commerce websites to scientific research.</p>"},{"location":"sql/01_sql_intro/#course-goals","title":"Course goals","text":"<p>This course will cover database basics, installation of MYSQL, various database types, database designs, SQL statements, and more. Here are some main goals as a developer for mastering databases:</p> <ul> <li>Understanding data modeling: The ability to design and implement effective data models is crucial for building scalable and efficient databases. This includes knowledge of different types of databases, data structures, and normalization techniques.</li> <li>Proficiency in SQL: SQL (Structured Query Language) is the standard language used for querying, manipulating, and managing data in databases. As a developer, it is important to have a strong understanding of SQL and its various functions.</li> <li>Database administration skills: Database administration involves tasks such as installing, configuring, and maintaining databases. A developer who is proficient in database administration can optimize performance, troubleshoot issues, and ensure the security of their databases.</li> <li>Knowledge of database architecture: Understanding the architecture of databases and how they interact with other systems is essential for building and integrating applications with databases.</li> </ul>"},{"location":"sql/01_sql_intro/#table-of-content","title":"Table of content","text":"<ol> <li>Introduction<ul> <li>Overview of the main topics that will be covered in the course and goals</li> <li>Explanation of what a database is and why they are important</li> </ul> </li> <li>Introduction to relational DBMS<ul> <li>What is a RDBMS</li> <li>What is MySQL</li> <li>MySQL installation</li> </ul> </li> <li>Database designs basics<ul> <li>Explanation of tables and keys in databases</li> <li>Explanation of SQL language and its uses</li> <li>Overview of different SQL Statements</li> <li>Explanation of DDL language and its uses</li> <li>Overview of different DDL Statements</li> </ul> </li> <li>Using MySQL Workbench<ul> <li>Data servers</li> <li>MySQL/RDBMS Concepts</li> <li>Overview of different TCL statements</li> <li>Overview of different DML statements</li> </ul> </li> <li>MySQL users<ul> <li>Introduction</li> <li>Users selection</li> <li>User privileges</li> </ul> </li> <li>Managing my database<ul> <li>Creating database</li> <li>Creating tables</li> <li>Introduction to MySQL Data Types</li> <li>MySQL Clauses</li> <li>Retreive data from single tables</li> </ul> </li> <li>Other statements<ul> <li>Overview of the Groupby statement</li> <li>Joins in SQL</li> <li>Creating Views with Aggregate functions</li> <li>Constraints</li> <li>Indexes</li> <li>Select Statement</li> </ul> </li> <li>Advanced topics<ul> <li>Subqueries</li> <li>Introduction to Extraction Transformation and Loading</li> <li>ETL Process</li> <li>Introduction to NoSQL databases</li> </ul> </li> </ol> <p>Let's get started \ud83e\udd73 </p>"},{"location":"sql/01_sql_intro/#why-database","title":"Why database ?","text":"<p>Imagine you work for a large online retailer, and your company needs to manage thousands of products, customers, and orders every day. You could store this data in an Excel spreadsheet, but as your company grows, this becomes increasingly difficult and time-consuming. You might have dozens or even hundreds of spreadsheets, each containing different pieces of data, making it difficult to find the information you need quickly. In addition, spreadsheets are not ideal for handling large amounts of data, and they can become slow and unwieldy as the size of the dataset grows.</p> <p></p> <p>This is where databases come in. A database is an organized collection of data that is designed to be easy to access, manage, and update. With a database, you can store all your company's data in one place, making it easy to find the information you need quickly. Databases are also designed to handle large amounts of data efficiently, so you can work with massive datasets without running into performance issues.</p>"},{"location":"sql/01_sql_intro/#types-of-databases","title":"Types of Databases","text":"<p>There are many different types of databases, each with its own strengths and weaknesses. Some of the most common types of databases include:</p> <ul> <li>Relational databases: These databases organize data into tables with columns and rows, similar to a spreadsheet. They are the most common type of database and are used in many different applications.</li> <li>NoSQL databases: These databases are designed to handle large amounts of unstructured or semi-structured data. They are commonly used in big data applications, such as social media analytics and scientific research.</li> <li>Object-oriented databases: These databases store data as objects, which can be manipulated using object-oriented programming techniques. They are commonly used in software development and data modeling.</li> </ul> <p>Some examples of day-to-day use cases for each type of database : </p>"},{"location":"sql/01_sql_intro/#relational-databases","title":"Relational databases","text":"<ul> <li>Customer database example : A business might use a relational database to keep track of customer information, such as their name, contact details, and purchase history. They could then use this information to target customers with personalized marketing campaigns based on their previous purchases.</li> <li>Inventory management example : A store might use a relational database to manage their inventory, with one table for products and another table for suppliers. They could then use SQL queries to quickly retrieve information on which products are in stock, which products are selling quickly, and which suppliers they need to contact to restock their inventory.</li> <li>Employee scheduling example : A company might use a relational database to manage employee schedules, with one table for employees and another table for shifts. They could then use SQL queries to quickly retrieve information on which employees are available to work on a particular day or time, and which shifts still need to be filled.</li> </ul>"},{"location":"sql/01_sql_intro/#nosql-databases","title":"NoSQL databases","text":"<ul> <li>Social media analytics: Social media platforms like Facebook and Twitter use NoSQL databases to store and analyze massive amounts of user data, such as likes, comments, and shares. This allows them to quickly retrieve and analyze user data to provide better ad targeting and personalized content.</li> <li>Internet of Things (IoT) devices: IoT devices like smart thermostats and security cameras generate a huge amount of data, which can be stored and analyzed in NoSQL databases. This allows manufacturers to track device usage patterns, identify and fix bugs, and improve device performance over time.</li> <li>Gaming: Many video games use NoSQL databases to store player data, such as character stats and in-game achievements. This allows players to continue their game progress across different devices, and enables game developers to quickly retrieve and analyze player data to identify areas for improvement.</li> </ul>"},{"location":"sql/01_sql_intro/#object-oriented-databases","title":"Object-oriented databases","text":"<ul> <li>Geolocation data: Companies that rely on geolocation data, such as mapping and navigation services, often use object-oriented databases to store and retrieve this data. This allows them to quickly retrieve and analyze large amounts of geolocation data in real-time.</li> <li>E-commerce: An e-commerce website might use an object-oriented database to store and manage product information, such as product images and descriptions. This allows them to easily update and manage product information across multiple platforms, such as their website, mobile app, and social media.</li> <li>Medical records: Hospitals and healthcare providers often use object-oriented databases to manage patient medical records, which can include a wide range of data types, such as images, test results, and diagnoses. This allows healthcare providers to easily access and update patient information, and can help improve patient care and outcomes.</li> </ul> <p>In this course, we will be focusing on relational databases, specifically MySQL, which is a popular open-source database management system. We will also introduce the concept of NoSQL databases.</p>"},{"location":"sql/01_sql_intro/#what-are-dbms","title":"What are DBMS ?","text":"<p>A Database Management System (DBMS) is defined as the software system that allows users to define, create, maintain and control access to the database. DBMS makes it possible for end users to create, read, update and delete data in database. A DBMS serves as an interface between an end-user and the database. DBMS Examples: MySQL, Microsoft Access, SQL Server, FileMaker, Oracle.</p> <p></p> <p>Advantages of DBMS : </p> <ul> <li>Improved Data Availability</li> <li>Improved Data Security Improved</li> <li>data integration Improved decision making</li> <li>Increased end-user productivity Simplicity</li> </ul>"},{"location":"sql/02_db_kesako/","title":"Introduction","text":""},{"location":"sql/02_db_kesako/#what-are-rdbms","title":"What are RDBMS ?","text":"<p>A relational database organizes data into tables which can be linked\u2014or related\u2014based on data common to each. This capability enables you to retrieve an entirely new table from data in one or more tables with a single query. Data is represented in the terms of rows/records and columns. In a relational database, each row in the table is a record with a unique ID called the key.</p>"},{"location":"sql/02_db_kesako/#what-is-mysql","title":"What is MySQL ?","text":"<p>MySQL is one of the most recognizable technologies in the modern big data ecosystem. Often called the most popular database and currently enjoying widespread, effective use regardless of industry, it\u2019s clear that anyone involved with enterprise data or general IT should at least aim for a basic familiarity of MySQL.</p> <p></p> <p>MySQL is a relational database management system (RDBMS) developed by Oracle that is based on structured query language (SQL).</p> <p></p> <p>MySQL is integral to many of the most popular software stacks for building and maintaining everything from customer-facing web applications to powerful, data-driven B2B services. Its open-source nature, stability, and rich feature set, paired with ongoing development and support from Oracle, have meant that internet-critical organizations such as Facebook, Flickr, Twitter, Wikipedia, and YouTube all employ MySQL backends.</p>"},{"location":"sql/02_db_kesako/#mysql-client-and-cli","title":"MySQL client and CLI","text":"<p>Think of a database like a big organized warehouse full of information. In order to get information from the warehouse or add information to it, we need a way to talk to it. </p> <p></p> <p>That's where the MySQL client comes in. It's like the messenger that we use to talk to the warehouse, and it allows us to read or update information stored in the database.</p> <p></p> <p>We use a command line interface (CLI) to interact with the MySQL client, which allows us to send specific commands to the database. A command-line interface (CLI) is a text-based interface used to interact with a computer's operating system or software by typing commands in a terminal window. It allows you to perform various tasks such as managing files and directories, executing programs, and interacting with databases, by entering commands and receiving text-based output.</p> <p></p> <p>In the context of MySQL, the CLI is a tool that enables you to interact with a MySQL database from a terminal window or a graphic interface by typing SQL commands. This means you can create, modify, and query your databases without using a graphical user interface. The CLI is a powerful tool that gives you fine-grained control over your database, but it requires some knowledge of SQL commands and syntax to use effectively.</p>"},{"location":"sql/02_db_kesako/#vocabulary","title":"Vocabulary","text":"<p>Here's an additional point on the differences between MySQL client, server, and SQL:</p> <ul> <li>MySQL client is a command-line tool that allows you to interact with the MySQL server, execute SQL queries, and manage databases.</li> <li>MySQL server is the software that stores and manages databases, and allows multiple clients to connect to it and perform operations on the databases.</li> <li>SQL (Structured Query Language) is the language used to interact with relational databases like MySQL, and it provides a standardized syntax for creating, modifying, and querying databases.</li> </ul>"},{"location":"sql/02_db_kesako/#advantages-of-mysql","title":"Advantages of MySQL","text":"<ul> <li>MySQL is secure as it consists of a solid data security layer to protect sensitive data from intruders and passwords in MySQL are encrypted</li> <li>MySQL is free and open source</li> <li>MySQL is compatible with most platforms including Windows, MacOS and Linux</li> <li>MySQL provides the ability to run the clients and the server on the same computer or on different computers, via internet or local network.</li> <li>MySQL has a unique storage engine architecture which makes it faster, cheaper and more reliable.</li> <li>MySQL gives developers higher productivity by using views, Triggers and Stored procedures</li> <li>MySQL is simple and easy to use. You can build and interact with MySQL with only the basic knowledge of MySQL and a few simple SQL statements.</li> <li>MySQL is scalable and capable of handling more than 50 million rows. This is enough to handle almost any amount of data. Although the default file size limit is 4GB but it can be increased to 8TB.</li> </ul>"},{"location":"sql/02_db_kesako/#disadvantages-of-mysql","title":"Disadvantages of MYSQL","text":"<ul> <li>MySQL is not very efficient in handling very large databases.</li> <li>MySQL doesn\u2019t have as good a developing and debugging tool as compared to paid databases.</li> <li>MySQL versions less than 5.0 do not support COMMIT, stored procedure and ROLE.</li> <li>MySQL is prone to data corruption as it inefficient in handling transactions.</li> <li>MySQL does not support SQL check constraints.</li> </ul>"},{"location":"sql/02_db_kesako/#installing-mysql","title":"Installing MySQL","text":"<p>To install MySQL on your computer, please visit their website And download the free and open source community edition of MYSQL. </p> <ul> <li>For Windows select \u201cInstaller for Windows\u201d</li> <li>For Mac select \u201cMacOS\u201d</li> <li>For Linux select \u201cAPT\u201d or \u201cYUM\u201d</li> </ul> <p>Once downloaded, run the installer and follow the instructions to install MYSQL on your computer then launch the MYSQL Workbench</p>"},{"location":"sql/03_table/","title":"Tables &amp; Keys","text":"<p>Tables and keys are fundamental concepts in relational database management systems. A table is a collection of related data, organized into rows and columns. Each row in a table represents a unique instance of the data, while each column represents a specific attribute or characteristic of that data.</p> <p></p> <p>Keys are used to uniquely identify each row in a table. A key is a column or set of columns in a table that contains values that are unique across all the rows in the table. Keys are used to enforce data integrity, to ensure that data is not duplicated or inconsistent, and to enable efficient searching and sorting of data.</p> <p></p> <p>In this course, we'll explore the different types of keys that can be used in MySQL, and how they can be used to create tables with well-defined relationships between them.</p>"},{"location":"sql/03_table/#creating-tables-in-mysql","title":"Creating Tables in MySQL","text":"<p>Creating a table is the first step in building a database. To create a table in MySQL, we use the CREATE TABLE statement, followed by the table name and a list of columns and their data types. Here's an example of creating a simple table to store information about customers:</p> <pre><code>CREATE TABLE customers (\ncustomer_id INT PRIMARY KEY,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nemail VARCHAR(100)\n);\n</code></pre> <p>This creates a table called customers with four columns: customer_id, first_name, last_name, and email. The customer_id column is defined as the primary key, which means it will contain unique values that identify each row in the table.</p>"},{"location":"sql/03_table/#keys","title":"Keys","text":"<p>Keys are an important concept in database design. They are used to ensure data integrity and to establish relationships between tables. There are several types of keys in a database:</p>"},{"location":"sql/03_table/#primary-key","title":"Primary Key","text":"<p>A primary key is a column or set of columns that uniquely identifies each row in a table. The primary key is used to enforce data integrity and to ensure that there are no duplicate rows in the table. We can define a primary key using the PRIMARY KEY constraint, as shown in the example above. Here's another example, this time with a table called orders that has a composite primary key made up of two columns:</p> <p><pre><code>CREATE TABLE orders (\norder_id INT  PRIMARY KEY,\ncustomer_id INT,\norder_date DATE,\n);\n</code></pre> This creates a table called orders with three columns: order_id, customer_id, and order_date. The PRIMARY KEY constraint is used to define a composite primary key made up of the order_id and customer_id columns.</p>"},{"location":"sql/03_table/#foreign-key","title":"Foreign Key","text":"<p>A foreign key is a column in one table that refers to the primary key of another table. Foreign keys are used to create relationships between tables, and to enforce referential integrity between them. In MySQL, we can define a foreign key using the FOREIGN KEY constraint.</p> <p></p> <p>Here's an example of creating a table called orders that has a foreign key that references the customer_id column in the customers table:</p> <pre><code>CREATE TABLE orders (\norder_id INT PRIMARY KEY,\ncustomer_id INT,\norder_date DATE,\nFOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n</code></pre> <p>This creates a table called orders with three columns: order_id, customer_id, and order_date. The FOREIGN KEY constraint is used to define a foreign key that references the customer_id column in the customers table.</p>"},{"location":"sql/03_table/#unique-keys","title":"Unique Keys","text":"<p>A unique key is a column or set of columns in a table that contains unique values, but is not the primary key. Unique keys are used to enforce data integrity, and to enable efficient searching and sorting of data. In MySQL, we can define a unique key using the UNIQUE constraint.</p> <p></p> <p>Here's an example of creating a table called products that has a unique key on the <code>product_code</code> column:</p> <pre><code>CREATE TABLE products (\nproduct_id INT PRIMARY KEY,\nproduct_code VARCHAR(20) UNIQUE,\nproduct_name VARCHAR(50),\nprice DECIMAL(10,2)\n);\n</code></pre> <p>This creates a table called products with four columns: product_id, product_code, product_name, and price. The product_code column is defined as a unique key using the UNIQUE constraint, which means that it will contain unique values across all the rows in the table.</p>"},{"location":"sql/03_table/#composite-key","title":"Composite Key","text":"<p>A composite key, also known as a composite primary key, is a primary key that consists of two or more columns in a table. In other words, it is a unique identifier made up of multiple columns. A composite key is used when a single column cannot uniquely identify each row in a table, but a combination of columns can.</p> <p></p> <p>For example, consider a table called orders that tracks the orders made by customers. Each order is identified by a unique order number, but a customer can make multiple orders, so the order number alone cannot uniquely identify each row in the table. Instead, we can use a composite key made up of the order number and the customer ID to uniquely identify each row:</p> <pre><code>CREATE TABLE orders (\norder_number INT,\ncustomer_id INT,\norder_date DATE,\nPRIMARY KEY (order_number, customer_id)\n);\n</code></pre> <p>In this example, the primary key for the orders table is a composite key made up of the order_number and customer_id columns. This ensures that each row in the table is uniquely identified by a combination of these two columns. Using a composite key can improve the performance of queries that search or filter data based on a combination of columns. However, it can also make updates and deletions more complicated, since multiple columns must be taken into account.</p> <p></p> <p>PS : A unique key is used to enforce uniqueness of data within a table, while a composite key is used to uniquely identify each row in a table.</p>"},{"location":"sql/03_table/#conclusion","title":"Conclusion","text":"<p>Tables and keys are essential concepts in relational database management systems, and understanding them is crucial for designing efficient and well-organized databases. In MySQL, we can use the CREATE TABLE statement to create tables with different types of keys and indexes, and enforce data integrity and relationships between tables. By using these features effectively, we can create databases that are easy to query, maintain, and scale to meet the needs of any application.</p>"},{"location":"sql/04_basics/","title":"SQL","text":""},{"location":"sql/04_basics/#what-is-sql","title":"What is SQL?","text":"<p>SQL stands for Structured Query Language. It is a programming language used for managing and manipulating data stored in relational databases. SQL is used to create, modify, and query databases, and it is the most widely used language for managing databases.</p>"},{"location":"sql/04_basics/#why-use-sql","title":"Why use SQL?","text":"<p>SQL is used in many different industries and applications because it provides a powerful and flexible way to manage data. Here are some reasons why SQL is useful:</p> <ul> <li>SQL is a standardized language, meaning that it can be used with many different types of databases.</li> <li>SQL is flexible and scalable, meaning that it can be used to manage small or large amounts of data.</li> <li>SQL allows users to manipulate and analyze data in complex ways, making it a useful tool for data-driven decision making.</li> <li>SQL is widely used and well-documented, meaning that there is a large community of users who can offer support and guidance.</li> </ul>"},{"location":"sql/04_basics/#how-does-sql-work","title":"How does SQL work?","text":"<p>SQL works by interacting with relational databases, which are databases that store data in tables with rows and columns. Here's how it works:</p> <ul> <li>To create a database, users use SQL to define the structure of the tables and the relationships between them.</li> <li>To add data to a database, users use SQL to insert rows into the tables.</li> <li>To modify data in a database, users use SQL to update or delete rows in the tables.</li> <li>To query data from a database, users use SQL to retrieve specific data based on specified conditions.</li> </ul> <p>SQL is a powerful language that can be used to manipulate and analyze data in many different ways. With SQL, users can manage and analyze data in a flexible and scalable way, making it a useful tool for businesses, organizations, and individuals.</p>"},{"location":"sql/07_creating_tables/","title":"Creating Tables","text":"<p>We said before, in SQL a table is a collection of data stored in rows and columns. To create a table, you need to define the table schema which includes the table name, column names, data types, and any constraints on the data. The CREATE TABLE statement is used to create a new table in a database.</p>"},{"location":"sql/07_creating_tables/#in-depth-look-at-how-to-create-tables","title":"In-depth look at how to create tables","text":"<p>To create a new table in SQL, you use the <code>CREATE TABLE</code> command followed by the table name and a list of column definitions. Each column definition specifies the column name, data type, and any constraints on the data.</p> <p></p> <p>Here is an example of creating a simple table with two columns:</p> <pre><code>CREATE TABLE users (\nid INT PRIMARY KEY,\nname VARCHAR(50) NOT NULL\n);\n</code></pre> <p>This creates a table named <code>users</code> with two columns: <code>id</code> and <code>name</code>. The <code>id</code> column is defined as an integer and is marked as the primary key for the table. The <code>name</code> column is defined as a variable-length string with a maximum length of 50 characters and is marked as required <code>(NOT NULL)</code>.</p>"},{"location":"sql/07_creating_tables/#overview-of-different-data-types-and-how-to-use-them","title":"Overview of different data types and how to use them","text":"<p>SQL provides a wide range of data types that can be used to define columns in a table. These data types include integers, floating-point numbers, strings, dates, and more. Here are some common data types:</p> <ul> <li>INT: used for integer values</li> <li>VARCHAR(n): used for variable-length character strings with a maximum length of n</li> <li>DATE: used for date values</li> <li>FLOAT: used for floating-point numbers</li> <li>BOOLEAN: used for boolean values</li> </ul> <p>Here is an example of creating a table with columns of different data types:</p> <pre><code>CREATE TABLE products (\nid INT PRIMARY KEY,\nname VARCHAR(50) NOT NULL,\nprice FLOAT,\nin_stock BOOLEAN,\ncreated_at DATE\n);\n</code></pre>"},{"location":"sql/07_creating_tables/#add-primary-and-foreign-keys-and-link-an-other-table","title":"Add primary and foreign keys and link an other table","text":"<p>In a relational database, a primary key is a unique identifier for each row in a table. It is used to ensure that each row can be uniquely identified and is commonly used to link to other tables in the database.</p> <p></p> <p>A foreign key is a column in one table that refers to the primary key of another table. This is used to create relationships between tables and enforce referential integrity.</p> <p></p> <p>Here is an example of creating a table with a primary key and a foreign key:</p> <pre><code>CREATE TABLE orders (\nid INT PRIMARY KEY,\nproduct_id INT,\nquantity INT,\nFOREIGN KEY (product_id) REFERENCES products(id)\n);\n</code></pre> <p>This creates a table named orders with three columns: <code>id</code>, <code>product_id</code>, and <code>quantity</code>. The <code>id</code> column is defined as the primary key for the table. The <code>product_id</code> column is defined as a foreign key that references the id column in the <code>products</code> table, which creates a relationship between the two tables. Here, the <code>quantity</code> column is defined as an integer.</p>"},{"location":"sql/08_insert/","title":"Inserting Data","text":"<p>Once you have created a table, you can start inserting data into it. The process of inserting data involves specifying the table name, the columns to insert data into, and the values to be inserted.</p>"},{"location":"sql/08_insert/#overview-of-different-insert-commands-and-syntax","title":"Overview of Different Insert Commands and Syntax","text":"<p>There are a few different ways to insert data into a table in SQL, depending on how much information you have about the data you are inserting. Here are some common insert commands and their syntax:</p>"},{"location":"sql/08_insert/#inserting-values-into-specific-columns","title":"Inserting Values into Specific Columns","text":"<p>You can use the <code>INSERT INTO</code> command to insert values into specific columns in a table. Here is the syntax for inserting a single row of data into a table:</p> <pre><code>INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n</code></pre> <p>For example, to insert a new row into a <code>users</code> table with the values \"John Doe\" for the <code>name</code> column, \"johndoe@example.com\" for the <code>email</code> column, and 25 for the <code>age</code> column, you would use the following command:</p> <pre><code>INSERT INTO users (name, email, age)\nVALUES ('John Doe', 'johndoe@example.com', 25);\n</code></pre>"},{"location":"sql/08_insert/#inserting-values-into-all-columns","title":"Inserting Values into All Columns","text":"<p>If you have data to insert for every column in a table, you can omit the column names from the INSERT INTO command. Here is the syntax for inserting a single row of data into a table without specifying column names:</p> <pre><code>INSERT INTO table_name\nVALUES (value1, value2, value3, ...);\n</code></pre> <p>For example, to insert a new row into the <code>users</code> table with the values \"Jane Smith\" for the <code>name</code> column, \"janesmith@example.com\" for the <code>email</code> column, 30 for the <code>age</code> column, and \"female\" for the <code>gender</code> column, you would use the following command:</p> <pre><code>INSERT INTO users\nVALUES ('Jane Smith', 'janesmith@example.com', 30, 'female');\n</code></pre>"},{"location":"sql/08_insert/#inserting-multiple-rows-at-once","title":"Inserting Multiple Rows at Once","text":"<p>You can also use the <code>INSERT INTO</code> command to insert multiple rows of data at once. Here is the syntax for inserting multiple rows of data into a table:</p> <pre><code>INSERT INTO table_name (column1, column2, column3, ...)\nVALUES\n(value1, value2, value3, ...),\n(value1, value2, value3, ...),\n(value1, value2, value3, ...),\n...;\n</code></pre> <p>For example, to insert three new rows into the <code>users</code> table, you would use the following command:</p> <pre><code>INSERT INTO users (name, email, age)\nVALUES\n('Alice Johnson', 'alicejohnson@example.com', 35),\n('Bob Williams', 'bobwilliams@example.com', 40),\n('Charlie Brown', 'charliebrown@example.com', 45);\n</code></pre> <p>By using these different insert commands and syntax, you can efficiently add data to your SQL database tables.</p>"},{"location":"sql/09_constraints/","title":"Constraints","text":"<p>Constraints are rules that you can apply to a table in a database to enforce data integrity. They play a vital role in ensuring that the data within the database remains consistent and accurate. There are various types of constraints that can be applied to a table, each serving a specific purpose.</p>"},{"location":"sql/09_constraints/#types-of-constraints","title":"Types of constraints","text":"<p>One type of constraint is the primary key constraint, which enforces the uniqueness of a column or a group of columns within a table. Another type of constraint is the foreign key constraint, which establishes a relationship between two tables based on the values of their respective columns.</p> <p></p> <p>Other types of constraints include the NOT NULL constraint, which ensures that a column cannot have a NULL value, and the UNIQUE constraint, which ensures that the values in a column are unique.</p>"},{"location":"sql/09_constraints/#examples-of-customers-table-one-without-constraints-and-the-other-with-constraints","title":"Examples of customers table one without constraints and the other with constraints","text":""},{"location":"sql/09_constraints/#without-constraints","title":"Without Constraints","text":"<pre><code>CREATE TABLE customers (\nid INT,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nemail VARCHAR(100)\n);\nINSERT INTO customers (id, first_name, last_name, email)\nVALUES\n(1, 'John', 'Doe', 'john.doe@example.com'),\n(2, 'Jane', 'Doe', 'jane.doe@example.com'),\n(3, 'Bob', 'Smith', 'bob.smith@example.com'),\n(4, 'Alice', 'Johnson', 'alice.johnson@example.com');\n</code></pre> <p>In this example, we create a table named <code>customers</code> with four columns - <code>id</code>, <code>first_name</code>, <code>last_name</code>, and <code>email</code>. We then insert some sample data into the table. However, there are no constraints set on the table to enforce any rules about the data being inserted. For example, we can insert multiple rows with the same <code>id</code> value, which can lead to inconsistencies in the data.</p>"},{"location":"sql/09_constraints/#with-constraints","title":"With Constraints","text":"<pre><code>CREATE TABLE customers (\nid INT PRIMARY KEY,\nfirst_name VARCHAR(50) NOT NULL,\nlast_name VARCHAR(50) NOT NULL,\nemail VARCHAR(100) UNIQUE\n);\nINSERT INTO customers (id, first_name, last_name, email)\nVALUES\n(1, 'John', 'Doe', 'john.doe@example.com'),\n(2, 'Jane', 'Doe', 'jane.doe@example.com'),\n(3, 'Bob', 'Smith', 'bob.smith@example.com'),\n(4, 'Alice', 'Johnson', 'alice.johnson@example.com');\nINSERT INTO customers (id, first_name, last_name, email)\nVALUES\n(1, 'Mark', 'Smith', 'mark.smith@example.com'); -- This will fail due to duplicate primary key constraint\nINSERT INTO customers (id, first_name, last_name, email)\nVALUES\n(5, 'Sam', 'Jones', 'bob.smith@example.com'); -- This will fail due to unique constraint on email column\n</code></pre> <p>In this example, we create the same customers table, but with additional constraints. We set the id column as the primary key, which means that it must be unique for each row. We also set the first_name and last_name columns as NOT NULL, which means that they cannot be empty. Finally, we set the email column as UNIQUE, which means that each email must be unique in the table.</p> <p></p> <p>When we try to insert data into the table, the constraints are enforced. The first INSERT statement will work fine because it does not violate any constraints. However, the second INSERT statement will fail because it tries to insert a row with a duplicate id value, which violates the primary key constraint. Similarly, the third INSERT statement will fail because it tries to insert a row with a duplicate email value, which violates the unique constraint on the email column.</p>"},{"location":"sql/10_update_delete/","title":"Update &amp; Delete","text":"<p>In addition to inserting data into tables, you may also need to modify or delete existing data. The SQL language provides several commands for updating and deleting data within tables.</p>"},{"location":"sql/10_update_delete/#updating-data","title":"Updating Data","text":"<p>To update data within a table, you can use the <code>UPDATE</code> command followed by the name of the table and the <code>SET</code> keyword. The <code>SET</code> keyword is followed by the column name you want to update, an equals sign, and the new value you want to set.</p> <p></p> <p>Here's the basic syntax for updating data in a table:</p> <pre><code>UPDATE table_name\nSET column_name = new_value\nWHERE condition;\n</code></pre> <p>In this syntax, the <code>WHERE</code> clause specifies which rows to update. Without a <code>WHERE</code> clause, all rows in the table would be updated.</p> <p></p> <p>Here's an example that updates the price of a product in a table called <code>products</code>:</p> <pre><code>UPDATE products\nSET price = 19.99\nWHERE product_id = 1234;\n</code></pre> <p>This statement updates the price column for the row where the product_id is equal to 1234.</p>"},{"location":"sql/10_update_delete/#deleting-data","title":"Deleting Data","text":"<p>To delete data from a table, you can use the <code>DELETE</code> command followed by the name of the table. If you want to delete only certain rows, you can use a <code>WHERE</code> clause to specify which rows to delete.</p> <p></p> <p>Here's the basic syntax for deleting data from a table:</p> <pre><code>DELETE FROM table_name\nWHERE condition;\n</code></pre> <p>Here's an example that deletes a row from a table called <code>orders</code>:</p> <pre><code>DELETE FROM orders\nWHERE order_id = 5678;\n</code></pre> <p>This statement deletes only the row where the <code>order_id</code> is equal to 5678.</p>"},{"location":"sql/10_update_delete/#summarize-creating-inserting-updating-and-deleting","title":"Summarize : creating, inserting, updating and deleting","text":"<p>Let's summarize the previous notions with an SQL example code to create a table, insert values into it, and update a field : </p> <pre><code>-- Creating a table for products\nCREATE TABLE products (\nid INT PRIMARY KEY,\nname VARCHAR(50),\ncategory VARCHAR(50),\nprice DECIMAL(8, 2)\n);\n-- Inserting data into the table\nINSERT INTO products (id, name, category, price)\nVALUES (1, 'Product A', 'Category 1', 10.99),\n(2, 'Product B', 'Category 2', 19.99),\n(3, 'Product C', 'Category 1', 5.99);\n-- Updating the price of Product A\nUPDATE products\nSET price = 12.99\nWHERE id = 1;\n-- Deleting a record from the 'products' table\nDELETE FROM products\nWHERE product_id = 2;\n</code></pre> <p>In this example, we first create a table named <code>products</code> with four columns: <code>id</code>, <code>name</code>, <code>category</code>, and <code>price</code>. We define the <code>id</code> column as the primary key, meaning it uniquely identifies each row in the table.</p> <p></p> <p>Next, we insert three rows of data into the table using the <code>INSERT INTO</code> command. Each row represents a different product, with values for the <code>id</code>, <code>name</code>, <code>category</code>, and <code>price</code> columns.</p> <p></p> <p>Finally, we update the price of <code>Product A</code> using the <code>UPDATE</code> command. We specify the table we want to update (<code>products</code>), the field we want to update (<code>price</code>), and the new value we want to set <code>(12.99)</code>. We use the <code>WHERE</code> clause to specify which row(s) we want to update; in this case, we only want to update the row with an <code>id</code> of <code>1</code>, which corresponds to <code>Product A</code>.</p> <p></p> <p>Then, the <code>DELETE</code> command is used to remove the record from the <code>products</code> table where the value of the <code>product_id</code> field is equal to <code>2</code>. This will delete the second product from the table, which in this case is <code>Product B</code>.</p>"},{"location":"sql/10_update_delete/#deleting-a-single-field-in-a-row","title":"Deleting a single field in a row","text":"<p>Here's an example of deleting a single field in a row of the products table:</p> <pre><code>-- Delete the description of the product with id 3\nUPDATE products\nSET description = NULL\nWHERE id = 3;\n</code></pre> <p>In this example, we use the <code>UPDATE</code> command to modify the description field of the row with <code>id</code> equal to <code>3</code>. The <code>SET</code> keyword is used to specify the new value of the description field, which we set to <code>NULL</code> to delete the existing value.</p> <p></p> <p>The <code>WHERE</code> clause is used to specify which row(s) to update. In this case, we're only updating the row with <code>id</code> equal to <code>3</code>. By setting the description field to <code>NULL</code>, we effectively delete the value of that field for that particular row.</p>"},{"location":"sql/11_queries/","title":"Basic Queries","text":"<p>In the world of database management, tables and queries go hand in hand. Queries are a fundamental component of any database, as they allow you to retrieve and manipulate data in meaningful ways. </p> <p></p> <p>In this chapter, we will explore the basics of SQL queries and how they are used to extract data from tables. To demonstrate this, we will use two example tables, the <code>orders</code> and <code>customers</code> tables. </p> <p></p> <p>These tables will be linked together using a foreign key to show how queries can retrieve data from multiple tables at once. Understanding queries and the relationship between tables is essential for effective database management, as it enables developers to extract valuable insights and make informed decisions based on data.</p> <p></p> <p>This is the example table called <code>customers</code>:</p> <pre><code>CREATE TABLE customers (\nid INT PRIMARY KEY,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nemail VARCHAR(100),\naddress VARCHAR(100),\ncity VARCHAR(50),\nstate VARCHAR(50),\nzip_code VARCHAR(20)\n);\n</code></pre> <p>This table has columns for a customer's ID, first name, last name, email address, street address, city, state, and zip code. The <code>id</code> column is the primary key for the table, which means that each row in the table is uniquely identified by its value in the <code>id</code> column.</p> <p></p> <p>This is the example of an <code>orders</code> table:</p> <pre><code>CREATE TABLE orders (\norder_id INT PRIMARY KEY,\ncustomer_id INT,\norder_date DATE,\ntotal_price DECIMAL(10,2)\n);\n</code></pre> <p>This table has four columns: <code>order_id</code>, <code>customer_id</code>, <code>order_date</code>, and <code>total_price</code>. The <code>order_id</code> column is the primary key of the table, which means that each row has a unique value in that column.</p> <p></p> <p>The <code>customer_id</code> column is a foreign key that references the <code>customer_id</code> column in the <code>customers</code> table. </p> <p></p> <p>This establishes a relationship between the two tables. The orders table contains information about each order placed by a customer. The <code>customer_id</code> column is used to link each order to a specific customer in the <code>customers</code> table. </p> <p></p> <p>The <code>order_date</code> column contains the date that the order was placed, and the <code>total_price</code> column contains the total price of the order. By joining the <code>orders</code> table with the <code>customers</code> table on the <code>customer_id</code> column, we can retrieve information about both the customer and their order in a single query.</p>"},{"location":"sql/11_queries/#overview-of-different-select-commands-and-syntax","title":"Overview of Different SELECT Commands and Syntax","text":"<p>The <code>SELECT</code> statement has a variety of options for retrieving and manipulating data. Here are some examples:</p> <ul> <li> <p>The <code>WHERE</code> clause is used to filter data based on a specified condition: <pre><code>SELECT * FROM customers WHERE city = 'London';\n</code></pre> This statement retrieves all columns and rows from the <code>customers</code> table where the city is <code>London</code>.</p> </li> <li> <p>The <code>ORDER BY</code> clause is used to sort data by one or more columns: <pre><code>SELECT * FROM customers ORDER BY last_name;\n</code></pre> This statement retrieves all columns and rows from the <code>customers</code> table, sorted by the <code>last_name</code> column.</p> </li> <li> <p>The <code>GROUP BY</code> clause is used to group data by one or more columns: <pre><code>SELECT city, COUNT(*) FROM customers GROUP BY city;\n</code></pre> This statement retrieves the <code>city</code> column and a count of how many times each <code>city</code> appears in the <code>customers</code> table.</p> </li> <li> <p>The <code>JOIN</code> command is used to combine data from two or more tables: <pre><code>SELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;\n</code></pre> This statement retrieves all columns and rows from both the <code>customers</code> and <code>orders</code> tables where the <code>customer_id</code> column matches in both tables.</p> </li> </ul>"},{"location":"sql/12_company_db_1/","title":"Company Database Introduction","text":"<p>In the modern era of technology, most businesses depend on software to manage and track various aspects of their operations. One of the most important types of software that businesses rely on is the database management system (DBMS). A DBMS allows companies to store, manage, and retrieve information in a structured and organized way. A company database is a type of DBMS that is specifically designed to help organizations store and manage information about their employees, customers, products, and services.</p> <p></p> <p>A company database can be used for a wide range of purposes, such as tracking inventory, processing transactions, generating reports, and analyzing data. By keeping all the relevant information in a centralized location, a company database provides a more efficient and accurate way to manage and analyze data. This, in turn, enables businesses to make informed decisions based on reliable and up-to-date information.</p> <p></p> <p>Having a well-designed and properly maintained company database is vital to the success of any business. A good company database can help to improve operational efficiency, streamline processes, and enhance customer satisfaction. It can also help organizations to identify trends, analyze performance, and make strategic decisions based on real data.</p> <p></p> <p>In this chapter, we will explore the various components of a company database, including tables, fields, and relationships. We will also learn how to design and build a company database from scratch, as well as how to use SQL to retrieve, analyze, and manipulate data. By the end of this tutorial, you should have a good understanding how to build a database from scratch for your own business or project.</p>"},{"location":"sql/12_company_db_1/#summary-of-the-project","title":"Summary of the project","text":"<p>This project will focus on building a company database that includes seven tables:</p> <ul> <li>employees</li> <li>departments</li> <li>projects</li> <li>department_projects</li> <li>employee_projects</li> <li>jobs</li> <li>location</li> </ul> <p>These tables will be linked together using foreign keys and relationships, allowing organizations to easily access and manage information. The project will also include the creation of primary keys, indexes, and constraints to ensure the integrity and consistency of the data. This database will provide a robust platform for companies to store, organize, and access data in a way that enhances their ability to make data-driven decisions.</p>"},{"location":"sql/12_company_db_1/#set-up-the-project","title":"Set up the project","text":"<p>Start by opening your MySQL client and connecting to your server. In our case just start MySQL Workbench like in the installation section. </p>"},{"location":"sql/12_company_db_1/#database-creation","title":"Database creation","text":"<p>Create a new database call <code>company</code> with the graphic interface like in the installation section or with the SQL command line : </p> <pre><code>CREATE DATABASE company;\n</code></pre> <p>if you used the command line option run also this command :</p> <p><pre><code>USE company;\n</code></pre> like you've guess it just tell to MySQL to use our database for the futur queries.</p>"},{"location":"sql/12_company_db_1/#tables-creation","title":"Tables creation","text":"<p>This is the SQL script that creates the necessary tables : </p> <pre><code>CREATE DATABASE company;\nUSE company;\n-- Create the jobs table\nCREATE TABLE jobs (\njob_id INT PRIMARY KEY,\njob_title VARCHAR(50),\nmin_salary DECIMAL(10,2),\nmax_salary DECIMAL(10,2)\n);\n-- Create the locations table\nCREATE TABLE locations (\nlocation_id INT PRIMARY KEY,\ncity VARCHAR(50),\nstate VARCHAR(50),\ncountry VARCHAR(50),\n);\n-- Create the departments table\nCREATE TABLE departments (\ndepartment_id INT PRIMARY KEY,\ndepartment_name VARCHAR(50),\nlocation_id INT,\nFOREIGN KEY (location_id) REFERENCES locations (location_id)\n);\n-- Create the employees table\nCREATE TABLE employees (\nemployee_id INT PRIMARY KEY,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nemail VARCHAR(50),\nphone_number VARCHAR(20),\nhire_date DATE,\njob_id INT,\nsalary DECIMAL(10,2),\ndepartment_id INT,\nFOREIGN KEY (job_id) REFERENCES jobs (job_id),\nFOREIGN KEY (department_id) REFERENCES departments (department_id)\n);\n-- Create the projects table\nCREATE TABLE projects (\nproject_id INT PRIMARY KEY,\nproject_name VARCHAR(50),\nstart_date DATE,\nend_date DATE,\nestimated_cost DECIMAL(10,2)\n);\n-- Create the department_projects table\nCREATE TABLE department_projects (\ndepartment_id INT,\nproject_id INT,\nPRIMARY KEY (department_id, project_id),\nFOREIGN KEY (department_id) REFERENCES departments (department_id),\nFOREIGN KEY (project_id) REFERENCES projects (project_id)\n);\n-- Create the employee_projects table\nCREATE TABLE employee_projects (\nemployee_id INT,\nproject_id INT,\nPRIMARY KEY (employee_id, project_id),\nFOREIGN KEY (employee_id) REFERENCES employees (employee_id),\nFOREIGN KEY (project_id) REFERENCES projects (project_id)\n);\n</code></pre> <p>Note that the foreign keys are created using the <code>CONSTRAINT</code> keyword and the <code>REFERENCES</code> keyword to specify the table and column to which the key refers. The <code>AUTO_INCREMENT</code> keyword is used to specify that the primary key column should automatically increment for each new row.</p>"},{"location":"sql/12_company_db_1/#insert-data","title":"Insert data","text":"<p>Then populate the tables with this script : </p> <pre><code>-- insert 10 rows into jobs table\nINSERT INTO jobs (job_id, job_title, min_salary, max_salary)\nVALUES\n(1, 'Manager', 70000, 120000),\n(2, 'Salesperson', 20000, 40000),\n(3, 'Developer', 50000, 100000),\n(4, 'Accountant', 35000, 60000),\n(5, 'HR Manager', 45000, 80000),\n(6, 'Marketing Specialist', 40000, 75000),\n(7, 'Administrative Assistant', 25000, 35000),\n(8, 'Designer', 45000, 80000),\n(9, 'Writer', 30000, 50000),\n(10,'Engineer', 55000, 90000);\n-- insert 10 rows into location table\nINSERT INTO locations (location_id, city, state, country)\nVALUES\n(1, 'New York', 'NY', 'USA'),\n(2, 'Los Angeles', 'CA', 'USA'),\n(3, 'San Francisco', 'CA', 'USA'),\n(4, 'Chicago', 'IL', 'USA'),\n(5, 'Houston', 'TX', 'USA'),\n(6, 'London', NULL, 'England'),\n(7, 'Paris', NULL, 'France'),\n(8, 'Berlin', NULL, 'Germany'),\n(9, 'Sydney', NULL, 'Australia'),\n(10, 'Tokyo', NULL, 'Japan');\n-- insert 5 rows into departments table\nINSERT INTO departments (department_id, department_name, location_id)\nVALUES\n(1, 'Engineering', 1),\n(2, 'Sales', 2),\n(3, 'Administration', 2),\n(4, 'Marketing', 3),\n(5, 'Data pole', 1);\n-- Insert 10 employees\nINSERT INTO employees ( employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)\nVALUES\n(1, 'John', 'Doe', 'johndoe@example.com', '555-555-1234', '2022-01-01', 1, 50000, 1),\n(2, 'Jane', 'Doe', 'janedoe@example.com', '555-555-5678', '2022-01-01', 2, 60000, 1),\n(3, 'Bob', 'Smith', 'bobsmith@example.com', '555-555-9012', '2022-02-01', 3, 75000, 2),\n(4, 'Alice', 'Johnson', 'alicejohnson@example.com', '555-555-3456', '2022-02-01', 4, 85000, 2),\n(5, 'Mark', 'Lee', 'marklee@example.com', '555-555-7890', '2022-03-01', 5, 95000, 3),\n(6, 'Emily', 'Chen', 'emilychen@example.com', '555-555-2345', '2022-03-01', 5, 80000, 3),\n(7, 'Sara', 'Kim', 'sarakim@example.com', '555-555-6789', '2022-04-01', 6, 70000, 4),\n(8, 'Michael', 'Wu', 'michaelwu@example.com', '555-555-0123', '2022-04-01', 7, 65000, 4),\n(9, 'David', 'Nguyen', 'davidnguyen@example.com', '555-555-4567', '2022-05-01', 8, 55000, 5),\n(10, 'Jennifer', 'Garcia', 'jennifergarcia@example.com', '555-555-8901', '2022-05-01', 9, 60000, 5);\n-- Insert 4 projects\nINSERT INTO projects (project_id, project_name, start_date, end_date, estimated_cost)\nVALUES\n(1, 'Website Redesign', '2022-01-01', '2022-06-30', 50000),\n(2, 'Sales Campaign', '2022-02-01', '2022-04-30', 120000),\n(3, 'Database Migration', '2022-03-01', '2022-08-31', 140000),\n(4, 'NLP', '2022-04-01', '2022-07-01', 8000);\n-- insert 10 rows into department_projects table\nINSERT INTO department_projects (department_id, project_id)\nVALUES\n(1, 1),\n(1, 2),\n(2, 1),\n(2, 3),\n(3, 2),\n(3, 3),\n(4, 1),\n(4, 2),\n(5, 1),\n(5, 3);\n-- Insert 10 rows into the employee_projects table\nINSERT INTO employee_projects (employee_id, project_id)\nVALUES (1, 1),\n(1, 2),\n(2, 1),\n(2, 3),\n(3, 2),\n(3, 3),\n(4, 2),\n(4, 1),\n(5, 3),\n(5, 1);\n</code></pre>"},{"location":"sql/12_company_db_1/#tests-some-queries-for-verification-to-test","title":"Tests some queries for verification --&gt; TO TEST","text":"<p>Let's take a look to ten example queries to verify the data in the seven tables:</p> <ul> <li>Retrieve all employees who work in the \"Sales\" department: <pre><code>SELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id\nWHERE d.department_name = 'Sales';\n</code></pre></li> <li>Retrieve all projects that are assigned to the \"Marketing\" department: <pre><code>SELECT p.project_name, d.department_name\nFROM projects p\nJOIN department_projects dp ON p.project_id = dp.project_id\nJOIN departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'Marketing';\n</code></pre></li> <li>Retrieve all projects that have an estimated cost greater than $100,000: <pre><code>SELECT project_name, estimated_cost\nFROM projects\nWHERE estimated_cost &gt; 100000;\n</code></pre></li> <li>Retrieve all employees who are working on the \"Database Migration\": <pre><code>SELECT e.first_name, e.last_name, p.project_name\nFROM employees e\nJOIN employee_projects ep ON e.employee_id = ep.employee_id\nJOIN projects p ON ep.project_id = p.project_id\nWHERE p.project_name = 'Database Migration';\n</code></pre></li> <li>Retrieve all job titles and the number of employees who hold each job title: <pre><code>SELECT j.job_title, COUNT(*) AS num_employees\nFROM employees e\nJOIN jobs j ON e.job_id = j.job_id\nGROUP BY j.job_title;\n</code></pre></li> <li>List all employees and their department: <pre><code>SELECT e.employee_id, e.first_name, e.last_name, d.department_name \nFROM employees e \nINNER JOIN departments d ON e.department_id = d.department_id;\n</code></pre></li> <li>List all departments and their location: <pre><code>SELECT d.department_name, l.city, l.state \nFROM departments d \nINNER JOIN locations l ON d.location_id = l.location_id;\n</code></pre></li> <li>List all projects and their department: <pre><code>SELECT p.project_id, p.project_name, d.department_name \nFROM projects p \nINNER JOIN department_projects dp ON p.project_id = dp.project_id \nINNER JOIN departments d ON dp.department_id = d.department_id;\n</code></pre></li> <li>List all employees and the projects they are working on: <pre><code>SELECT e.first_name, e.last_name, p.project_name \nFROM employees e \nINNER JOIN employee_projects ep ON e.employee_id = ep.employee_id \nINNER JOIN projects p ON ep.project_id = p.project_id;\n</code></pre></li> <li>List all employees, their job title, and salary: <pre><code>SELECT e.first_name, e.last_name, j.job_title, e.salary \nFROM employees e \nINNER JOIN jobs j ON e.job_id = j.job_id;\n</code></pre></li> </ul>"},{"location":"sql/12_company_db_1/#the-importance-of-schema-and-organization","title":"The importance of schema and organization","text":"<p>Creating a schema and diagrams for a database is critical, especially when dealing with large databases with many tables and relationships. Without proper organization and documentation, it can be challenging to understand the structure and relationships between different tables. </p> <p></p> <p>This is particularly true when many people are working on the database or when there is a lot of data being added and updated regularly. Having a clear schema and diagrams can help developers and users understand the structure and relationships of the data, leading to more efficient and effective use of the database. Additionally, it can help to identify and prevent errors in the data or in the database design itself. Overall, investing time in creating a clear schema and diagrams can save time and resources in the long run and make the database easier to manage and use.</p>"},{"location":"sql/12_company_db_1/#wrap-up","title":"Wrap-up","text":"<ul> <li>In this project, we learned how to create a company database using MySQL.</li> <li>We created 7 tables: employees, departments, projects, department_projects, employee_projects, jobs, and location.</li> <li>We added primary keys to all tables with auto-increment options for unique identification and added foreign keys to establish relationships between tables.</li> <li>We inserted data into each table and test some queries.</li> <li>We also learned about the importance of schema and diagrams for databases, especially as the number of tables and relationships grows, and the significance of foreign keys in ensuring data integrity and consistency.</li> </ul>"},{"location":"sql/13_queries_db/","title":"More queries","text":"<p>In this chapter we will be working on the MySQL Sample Database. The MySQL Sample Database provides a sample database called \"employees\" that you can use to practice SQL queries. You can download the database and load it into your MySQL server. Link to the database</p>"},{"location":"sql/13_queries_db/#download-the-database-and-load-it-into-mysqlworkbench","title":"Download the database and load it into MySQLWorkbench","text":"<p>\ud83d\udea7 You need to run MySQL server (with MAMP for example) before lunching MySQLWorkbench \ud83d\udea7</p>"},{"location":"sql/13_queries_db/#dowload-the-mysql-sample-database","title":"Dowload the MySQL Sample Database","text":"<p>You can follow the documentation above or just go to : link and download the repo as zip. </p>"},{"location":"sql/13_queries_db/#load-mysql-sample-database-into-mysqlworkbench","title":"Load MySQL Sample Database into MySQLWorkbench","text":"<p>When you have downloaded the git repo as zip go to your Download files and unzip the folder and  open MySQLWorkbench then go to &gt; <code>File</code> &gt; <code>Run SQL Scripts</code> and load the file <code>employees.sql</code></p>"},{"location":"sql/13_queries_db/#run-a-test-query","title":"Run a test query","text":"<p>We will running a test query for testing our database, we must open a new file for writing our query for that you can click on the file icon button like in the screen below or go to <code>File</code> &gt; <code>New Query Tab</code></p> <p><pre><code>use employees;\nSELECT d.dept_name, AVG(s.salary) AS avg_salary\nFROM departments d\nINNER JOIN dept_emp de ON d.dept_no = de.dept_no\nINNER JOIN salaries s ON de.emp_no = s.emp_no\nGROUP BY d.dept_name;\n</code></pre> Notice that, the first line <code>use employees;</code> is here to tell to our software to use the employees database then you can see the result of our test query in the window bellow :</p> <p></p> <p></p> <p></p> <p>We will study in detail this query later don't worry. </p>"},{"location":"sql/13_queries_db/#in-depth-look-at-more-basic-queries-in-sql","title":"In-depth look at more basic queries in SQL","text":"<p>We encourage you to pratice the queries into MySQLWorkbench, let's review some basics !</p>"},{"location":"sql/13_queries_db/#select-statement","title":"SELECT statement:","text":"<p>The <code>SELECT</code> statement is used to retrieve data from a table in a database. It can take multiple arguments, which are separated by commas. </p> <p></p> <p>The <code>*</code> character can be used as a shorthand to select all columns in a table. We often use the <code>AS</code> keyword is used to assign a name to a column in the output.</p> <pre><code>SELECT first_name, last_name, salary AS \"Annual Salary\"\nFROM employees;\n</code></pre> <p>In this example, the AS keyword is used to assign a new name to the \"salary\" column in the output. The new name is \"Annual Salary\".</p> <p></p> <p>This query selects the first name, last name, and salary of all the employees in the \"employees\" table, but it renames the \"salary\" column as \"Annual Salary\" in the output.</p> <p></p> <p>Note that the AS keyword is optional, and you can also use a space or equals sign to assign a name to a column. For example, the following query is equivalent to the one above:</p> <pre><code>SELECT first_name, last_name, salary \"Annual Salary\"\nFROM employees;\n</code></pre> <p>In both cases, the output column is named \"Annual Salary\".</p>"},{"location":"sql/13_queries_db/#where-clause","title":"WHERE clause:","text":"<p>The WHERE clause is used to filter the results returned by a SELECT statement. It contains a logical expression that evaluates to true or false for each row in the table.</p> <pre><code>SELECT *\nFROM orders\nWHERE order_date &gt;= '2022-01-01';\n</code></pre> <p>This query selects all the columns from the \"orders\" table where the order date is on or after January 1, 2022.</p> <p></p> <p>This is an other example : </p> <p><pre><code>SELECT first_name, last_name, salary * 12 AS \"Annual Salary\"\nFROM employees\nWHERE hire_date &gt;= '2005-01-01';\n</code></pre> In this example, the WHERE clause is used to filter the results to include only employees hired on or after January 1, 2005. The AS keyword is used to assign a new name to the \"salary * 12\" expression in the output. The new name is \"Annual Salary\".</p> <p></p> <p>This query selects the first name, last name, and annual salary of all the employees in the \"employees\" table who were hired on or after January 1, 2005. The annual salary is calculated by multiplying the monthly salary by 12.</p> <p></p> <p>Note that the order of the SQL clauses matters. The WHERE clause is used to filter the results before the AS keyword is used to assign a new name to the output column.</p>"},{"location":"sql/13_queries_db/#join-clause","title":"JOIN clause","text":"<p>The <code>JOIN</code> clause is used to combine rows from two or more tables based on a related column between them. Here's an example:</p> <p><pre><code>SELECT customers.first_name, customers.last_name, orders.order_date\nFROM customers\nINNER JOIN orders\nON customers.customer_id = orders.customer_id;\n</code></pre> This query selects the first name, last name, and order date of all customers who have placed an order. The results are obtained by joining the \"customers\" and \"orders\" tables on the customer_id column.</p> <p></p> <p>We will discuss nore about <code>JOIN</code> later don't worry. </p>"},{"location":"sql/13_queries_db/#order-by-clause","title":"ORDER BY clause","text":"<p>The ORDER BY clause is used to sort the results returned by a SELECT statement based on one or more columns. Here's an example:</p> <pre><code>SELECT product_name, unit_price\nFROM products\nORDER BY unit_price DESC;\n</code></pre> <p>This query selects the product name and unit price of all the products in the \"products\" table and sorts the results in descending order based on the unit price.</p>"},{"location":"sql/13_queries_db/#group-by-clause","title":"GROUP BY clause","text":"<p>The GROUP BY clause is used to group the rows returned by a SELECT statement based on one or more columns. The columns listed in the SELECT statement must be either in the GROUP BY clause or have an aggregate function applied to them. Aggregate functions like COUNT, SUM, AVG, MAX, and MIN can be used to perform calculations on the grouped data.</p> <pre><code>SELECT category_id, COUNT(*) AS num_products\nFROM products\nGROUP BY category_id;\n</code></pre> <p>This query groups the products in the \"products\" table by their category and counts the number of products in each category. The COUNT(*) function is used to count the number of rows in each group, and the AS keyword is used to assign the name \"num_products\" to the output column.</p> <p></p> <p>Here an other example : </p> <pre><code>SELECT department, AVG(salary) AS \"Average Salary\"\nFROM employees\nGROUP BY department\nORDER BY \"Average Salary\" DESC;\n</code></pre> <p>In this example, the GROUP BY clause is used to group the employees by department, and the AVG() function is used to calculate the average salary for each department. The AS keyword is used to assign a new name to the \"AVG(salary)\" expression in the output. The new name is \"Average Salary\".</p> <p></p> <p>The ORDER BY keyword is used to sort the results in descending order based on the \"Average Salary\" column. Note that we need to enclose the output column name in double quotes because it contains a space.</p> <p></p> <p>This query selects the department and average salary of all the employees in the \"employees\" table, grouped by department, and sorted in descending order by average salary.</p> <p></p> <p>Note that when using the GROUP BY clause, the SELECT statement can only include the columns that are specified in the GROUP BY clause or have an aggregate function applied to them. Any other columns will result in an error, unless they are included in an aggregate function. In this example, we only select the department and average salary columns because the department column is included in the GROUP BY clause.</p>"},{"location":"sql/13_queries_db/#wrap-up","title":"Wrap up","text":"<p>These are just a few examples of basic SQL queries, but they provide a good foundation for building more complex queries. By combining these statements with other SQL clauses, you can perform powerful data analysis and extract valuable insights from your data.</p> <p></p> <p>Let's summarize what we've learn in this section : </p> <ul> <li>The SELECT statement is used to retrieve data from a table in a database. It can take multiple arguments, which are separated by commas. The * character can be used as a shorthand to select all columns in a table. The AS keyword is used to assign a name to a column in the output.</li> <li>The WHERE clause is used to filter the results returned by a SELECT statement. It contains a logical expression that evaluates to true or false for each row in the table.</li> <li>The JOIN clause is used to combine rows from two or more tables based on a related column between them. It can be used to join tables on a primary key/foreign key relationship or on a common column.</li> <li>The GROUP BY clause is used to group the rows returned by a SELECT statement based on one or more columns. The columns listed in the SELECT statement must be either in the GROUP BY clause or have an aggregate function applied to them.</li> <li>Aggregate functions like COUNT, SUM, AVG, MAX, and MIN can be used to perform calculations on the grouped data.</li> <li>The ORDER BY clause is used to sort the results returned by a SELECT statement based on one or more columns. It can be used to sort in ascending (ASC) or descending (DESC) order.</li> <li>The AS keyword is used to assign a new name to a column or an expression in the output.</li> <li>SQL keywords are not case-sensitive, but it is a best practice to use them in uppercase to make the code more readable.</li> <li>The order of the SQL clauses matters, and it can affect the output of the query.</li> </ul>"}]}